{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"FastOpenAPI","text":"<p> FastOpenAPI es una biblioteca para generar e integrar esquemas OpenAPI usando Pydantic y varios frameworks. </p> <p>   Este proyecto fue inspirado por FastAPI y busca ofrecer una experiencia amigable para desarrolladores similar. </p> <p> </p>"},{"location":"#sobre-el-proyecto","title":"Sobre el proyecto","text":"<p>FastOpenAPI es una biblioteca de Python para generar e integrar esquemas OpenAPI usando modelos Pydantic en diversos frameworks web. Inspirada por FastAPI, proporciona una experiencia similar, pero compatible con frameworks como AIOHTTP, Falcon, Flask, Quart, Sanic, Starlette, Tornado y Django. Con FastOpenAPI puedes a\u00f1adir documentaci\u00f3n interactiva y validaci\u00f3n autom\u00e1tica a proyectos existentes sin cambiar de framework.</p> <p>FastOpenAPI a\u00fan est\u00e1 en desarrollo activo (versi\u00f3n pre-1.0), pero ya se encuentra estable para muchos usos. Todos los aportes y comentarios son bienvenidos.</p>"},{"location":"#caracteristicas","title":"Caracter\u00edsticas","text":"<ul> <li>Generaci\u00f3n autom\u00e1tica de OpenAPI \u2013 define tus rutas y modelos, y FastOpenAPI generar\u00e1 el esquema completo.</li> <li>Soporte para Pydantic v2 \u2013 validaci\u00f3n y serializaci\u00f3n robusta para entradas y salidas.</li> <li>Compatibilidad con m\u00faltiples frameworks \u2013 incluyendo AIOHTTP, Falcon, Flask, Quart, Sanic, Starlette, Tornado y Django.</li> <li>Estilo de ruteo similar a FastAPI \u2013 decoradores como <code>@router.get</code>, <code>@router.post</code>, etc.</li> <li>Documentaci\u00f3n interactiva integrada \u2013 Swagger UI (<code>/docs</code>) y ReDoc (<code>/redoc</code>).</li> <li>Validaci\u00f3n y gesti\u00f3n de errores \u2013 respuestas autom\u00e1ticas ante entradas inv\u00e1lidas, con clases como <code>BadRequestError</code>, <code>ResourceNotFoundError</code>.</li> </ul> <p>Explora la documentaci\u00f3n usando el men\u00fa lateral. Comienza con Instalaci\u00f3n y Inicio R\u00e1pido, contin\u00faa con Uso. Cada framework compatible tiene su propia p\u00e1gina. Para temas m\u00e1s avanzados, revisa Uso Avanzado y la Referencia API. Si deseas contribuir, visita la secci\u00f3n Contribuir. Cambios importantes est\u00e1n en el Changelog, y tambi\u00e9n puedes revisar la secci\u00f3n de FAQ.</p>"},{"location":"changelog/","title":"Registro de Cambios (Changelog)","text":"<p>Todos los cambios importantes en FastOpenAPI se documentan en este archivo.</p>"},{"location":"changelog/#050-2025-04-13","title":"[0.5.0] \u2013 2025-04-13","text":""},{"location":"changelog/#anadido","title":"A\u00f1adido","text":"<ul> <li>AioHttpRouter para integraci\u00f3n con el framework AIOHTTP (soporte async).</li> <li>Cach\u00e9 a nivel de clase para los esquemas de modelos Pydantic (mejora el rendimiento al evitar la regeneraci\u00f3n del mismo esquema).</li> <li>Par\u00e1metro <code>response_errors</code> en los decoradores de rutas para documentar errores en OpenAPI.</li> <li>M\u00f3dulo <code>error_handler</code> para respuestas de error est\u00e1ndar (incluye clases como <code>BadRequestError</code>, <code>ResourceNotFoundError</code>).</li> <li>Soporte de tipos simples (<code>int</code>, <code>float</code>, <code>bool</code>, <code>str</code>) como <code>response_model</code>.</li> </ul>"},{"location":"changelog/#040-20032025","title":"[0.4.0] \u2013 20/03/2025","text":""},{"location":"changelog/#anadido_1","title":"A\u00f1adido","text":"<ul> <li>Soporte para ReDoc UI (disponible en <code>/redoc</code>).</li> <li>TornadoRouter para el framework Tornado.</li> </ul>"},{"location":"changelog/#cambios","title":"Cambios","text":"<ul> <li>Reescritura de tests para mejorar cobertura y fiabilidad.</li> </ul>"},{"location":"changelog/#corregido","title":"Corregido","text":"<ul> <li>C\u00f3digos de error internos cambiados de 422 a 500, conforme a los est\u00e1ndares HTTP.</li> </ul>"},{"location":"changelog/#eliminado","title":"Eliminado","text":"<ul> <li>M\u00e9todos <code>add_docs_route</code> y <code>add_openapi_route</code> de <code>BaseRouter</code> (las rutas ahora se a\u00f1aden autom\u00e1ticamente).</li> </ul>"},{"location":"changelog/#031-15032025","title":"[0.3.1] \u2013 15/03/2025","text":""},{"location":"changelog/#corregido_1","title":"Corregido","text":"<ul> <li>Fallo al importar routers sin tener instalado el framework (ahora se captura <code>ModuleNotFoundError</code>).</li> </ul>"},{"location":"changelog/#030-15032025","title":"[0.3.0] \u2013 15/03/2025","text":""},{"location":"changelog/#anadido_2","title":"A\u00f1adido","text":"<ul> <li>QuartRouter para el framework Quart (async).</li> <li>Primera versi\u00f3n de la documentaci\u00f3n (introducci\u00f3n y ejemplos).</li> </ul>"},{"location":"changelog/#cambios_1","title":"Cambios","text":"<ul> <li>Mejorado el import: ahora puedes hacer <code>from fastopenapi.routers import YourRouter</code>.</li> </ul>"},{"location":"changelog/#corregido_2","title":"Corregido","text":"<ul> <li>Soporte correcto de query parameters como modelos en m\u00e9todos GET.</li> </ul>"},{"location":"changelog/#021-12032025","title":"[0.2.1] \u2013 12/03/2025","text":""},{"location":"changelog/#corregido_3","title":"Corregido","text":"<ul> <li>Serializaci\u00f3n de respuesta: <code>_serialize_response</code> ahora convierte modelos a dict antes de convertir a JSON.</li> <li>Correcci\u00f3n de errores cuando el <code>DataLoader</code> devolv\u00eda datos vac\u00edos.</li> <li>Se a\u00f1adieron tests para cubrir estos casos.</li> <li>Este archivo <code>CHANGELOG.md</code> fue a\u00f1adido.</li> </ul>"},{"location":"changelog/#020-11032025","title":"[0.2.0] \u2013 11/03/2025","text":""},{"location":"changelog/#anadido_3","title":"A\u00f1adido","text":"<ul> <li>Funci\u00f3n <code>resolve_endpoint_params</code> en <code>BaseRouter</code> para manejo de par\u00e1metros de path/query/body.</li> <li>Soporte para <code>prefix</code> en <code>include_router</code> para agrupar rutas.</li> <li>Soporte para <code>status_code</code> en decoradores.</li> </ul>"},{"location":"changelog/#cambios_2","title":"Cambios","text":"<ul> <li>Refactor de routers existentes para mayor uniformidad y reducci\u00f3n de duplicaci\u00f3n.</li> </ul>"},{"location":"changelog/#eliminado_1","title":"Eliminado","text":"<ul> <li>Eliminado <code>register_routes</code> en la implementaci\u00f3n de Starlette (reemplazado por refactor).</li> </ul>"},{"location":"changelog/#010-01032025","title":"[0.1.0] \u2013 01/03/2025","text":""},{"location":"changelog/#anadido_4","title":"A\u00f1adido","text":"<ul> <li>Publicaci\u00f3n inicial de FastOpenAPI.</li> <li>Funcionalidad b\u00e1sica:</li> <li>Ruteo base</li> <li>Soporte para Falcon, Flask, Sanic, Starlette</li> <li>Generaci\u00f3n de OpenAPI mediante Pydantic v2</li> <li>Validaci\u00f3n de par\u00e1metros y cuerpos</li> <li>README y ejemplos b\u00e1sicos</li> <li>Tests iniciales para rutas y esquemas</li> </ul>"},{"location":"contributing/","title":"\u00a1Bienvenido!","text":"<p>Gracias por considerar contribuir a FastOpenAPI \ud83c\udf89 Esta gu\u00eda explica c\u00f3mo comenzar, realizar aportes, escribir commits, abrir pull requests y ejecutar pruebas.</p>"},{"location":"contributing/#configuracion-y-ejecucion","title":"Configuraci\u00f3n y ejecuci\u00f3n","text":"<p>Instala las dependencias con:</p> <pre><code># Fork the repo on GitHub first, then:\ngit clone https://github.com/yourusername/fastopenapi.git\ncd fastopenapi\npoetry install\n</code></pre> <p>Si no usas <code>poetry</code>, tambi\u00e9n puedes instalar manualmente:</p> <pre><code>pip install -e .[dev]\n</code></pre>"},{"location":"contributing/#estructura-del-proyecto","title":"Estructura del proyecto","text":"<ul> <li><code>fastopenapi/</code> \u2014 c\u00f3digo principal de la biblioteca</li> <li><code>examples/</code> \u2014 ejemplos para distintos frameworks</li> <li><code>tests/</code> \u2014 pruebas unitarias</li> <li><code>benchmarks/</code> \u2014 pruebas de rendimiento</li> <li><code>docs/</code> \u2014 documentaci\u00f3n en varios idiomas</li> </ul>"},{"location":"contributing/#ejecutar-pruebas","title":"Ejecutar pruebas","text":"<p>Puedes ejecutar todas las pruebas con:</p> <pre><code>pytest\n</code></pre> <p>Incluye pruebas para la l\u00f3gica central y la integraci\u00f3n con los distintos frameworks soportados.</p>"},{"location":"contributing/#estilo-de-codigo","title":"Estilo de c\u00f3digo","text":"<p>Herramientas utilizadas:</p> <ul> <li><code>black</code> \u2014 formato autom\u00e1tico</li> <li><code>flake8</code> \u2014 an\u00e1lisis est\u00e1tico</li> <li><code>isort</code> \u2014 orden de imports</li> <li><code>pre-commit</code> \u2014 hooks de validaci\u00f3n antes del commit</li> </ul> <p>Instala los hooks:</p> <pre><code>pre-commit install\n</code></pre> <p>Ejecuta manualmente:</p> <pre><code>pre-commit run --all-files\n</code></pre>"},{"location":"contributing/#git-y-pull-requests","title":"Git y Pull Requests","text":"<ol> <li>Haz un fork del repositorio</li> <li>Crea una rama: <code>feature/tu-feature</code> o <code>fix/tu-arreglo</code></li> <li>Realiza commits peque\u00f1os y claros</li> <li>Abre un PR describiendo:</li> <li>Qu\u00e9 cambiaste o agregaste</li> <li>Qu\u00e9 frameworks se ven afectados</li> <li>C\u00f3mo lo probaste</li> </ol>"},{"location":"contributing/#documentacion","title":"Documentaci\u00f3n","text":"<p>Si modificas la API p\u00fablica o el comportamiento, actualiza tambi\u00e9n la documentaci\u00f3n:</p> <ul> <li>En <code>docs/en/</code></li> <li>Opcional: traducciones en <code>docs/es/</code>, <code>docs/ru/</code>, etc.</li> </ul>"},{"location":"contributing/#comentarios-y-ayuda","title":"Comentarios y ayuda","text":"<p>\u00bfNo est\u00e1s seguro de algo? Abre un issue o pregunta en el repositorio \u2014 \u00a1con gusto te ayudaremos!</p>"},{"location":"faq/","title":"FAQ (Preguntas Frecuentes)","text":"<p>Aqu\u00ed encontrar\u00e1s respuestas a preguntas comunes sobre FastOpenAPI. Si tienes otra duda, no dudes en abrir un issue en GitHub o contactarnos directamente.</p>"},{"location":"faq/#p-que-es-fastopenapi-y-en-que-se-diferencia-de-fastapi","title":"P: \u00bfQu\u00e9 es FastOpenAPI y en qu\u00e9 se diferencia de FastAPI?","text":"<p>R: FastOpenAPI no es un framework web, sino una biblioteca que a\u00f1ade documentaci\u00f3n OpenAPI/Swagger y validaci\u00f3n de solicitudes/respuestas a frameworks ya existentes como Flask, AIOHTTP, etc. FastAPI, en cambio, es un framework completo que ya incluye esto de forma nativa. En resumen: si est\u00e1s comenzando un nuevo proyecto, puedes usar FastAPI. Si ya tienes un proyecto o deseas usar otro framework, FastOpenAPI es ideal.</p>"},{"location":"faq/#p-que-frameworks-son-compatibles","title":"P: \u00bfQu\u00e9 frameworks son compatibles?","text":"<p>R: Actualmente, FastOpenAPI soporta:</p> <ul> <li>AIOHTTP</li> <li>Falcon</li> <li>Flask</li> <li>Quart</li> <li>Sanic</li> <li>Starlette</li> <li>Tornado</li> <li>Django</li> </ul> <p>FastOpenAPI es modular y puede extenderse f\u00e1cilmente. Tambi\u00e9n puedes crear tu propio <code>Router</code> (ver secci\u00f3n \"Uso avanzado\").</p>"},{"location":"faq/#p-que-versiones-de-python-y-pydantic-se-requieren","title":"P: \u00bfQu\u00e9 versiones de Python y Pydantic se requieren?","text":"<p>R: Python 3.10 o superior y Pydantic v2. FastOpenAPI aprovecha las nuevas funciones de tipado de Python y la generaci\u00f3n de esquemas JSON de Pydantic v2.</p>"},{"location":"faq/#p-como-se-documenta-la-autenticacion-jwt-api-keys-etc","title":"P: \u00bfC\u00f3mo se documenta la autenticaci\u00f3n (JWT, API Keys, etc.)?","text":"<p>R: FastOpenAPI no implementa autenticaci\u00f3n directamente. Puedes definir manualmente <code>securitySchemes</code> dentro del esquema OpenAPI (ver \"Uso avanzado\"). Por ejemplo, puedes agregar un par\u00e1metro <code>token: str</code> en tus endpoints y validar el token con middleware o decoradores externos.</p>"},{"location":"faq/#p-no-funcionan-docs-o-redoc","title":"P: \u00bfNo funcionan /docs o /redoc?","text":"<p>R: Verifica que est\u00e1s pasando correctamente la instancia <code>app</code> al inicializar el router: <code>router = FrameworkRouter(app=app)</code> Sin esto, no se registrar\u00e1n las rutas de documentaci\u00f3n. Tambi\u00e9n aseg\u00farate de que el servidor se est\u00e9 ejecutando correctamente y que no haya prefijos de URL interfiriendo.</p>"},{"location":"faq/#p-se-puede-usar-junto-con-otras-bibliotecas-como-flask-restx","title":"P: \u00bfSe puede usar junto con otras bibliotecas como Flask-RESTx?","text":"<p>R: No es recomendable. Si usas varias herramientas que generan esquemas OpenAPI autom\u00e1ticamente, puede haber conflictos. FastOpenAPI est\u00e1 pensado como una soluci\u00f3n independiente.</p>"},{"location":"faq/#p-tiene-soporte-para-inyeccion-de-dependencias-o-tareas-en-segundo-plano","title":"P: \u00bfTiene soporte para inyecci\u00f3n de dependencias o tareas en segundo plano?","text":"<p>R: No directamente. FastOpenAPI se enfoca solo en documentaci\u00f3n y validaci\u00f3n. Estas funciones deben ser manejadas por el framework subyacente.</p>"},{"location":"faq/#p-es-apto-para-produccion","title":"P: \u00bfEs apto para producci\u00f3n?","text":"<p>R: FastOpenAPI est\u00e1 en desarrollo activo (versi\u00f3n pre-1.0), pero ya es estable para muchos casos. Se recomienda fijar la versi\u00f3n en <code>requirements.txt</code> y probar antes de cada despliegue.</p>"},{"location":"faq/#p-como-puedo-contribuir-o-reportar-errores","title":"P: \u00bfC\u00f3mo puedo contribuir o reportar errores?","text":"<p>R: \u00a1Con gusto! Consulta la secci\u00f3n Contribuir. Puedes crear un issue o pull request en GitHub.</p>"},{"location":"faq/#p-hay-proyectos-de-ejemplo-que-usen-fastopenapi","title":"P: \u00bfHay proyectos de ejemplo que usen FastOpenAPI?","text":"<p>R: S\u00ed, en la carpeta <code>examples/</code> del repositorio encontrar\u00e1s ejemplos para cada framework compatible. Si usas FastOpenAPI en producci\u00f3n, \u00a1nos encantar\u00eda saberlo!</p>"},{"location":"faq/#p-que-version-de-openapi-se-genera","title":"P: \u00bfQu\u00e9 versi\u00f3n de OpenAPI se genera?","text":"<p>R: FastOpenAPI genera OpenAPI 3.1.0, ya que Pydantic v2 produce esquemas JSON compatibles con esa versi\u00f3n.</p> <p>\u00bfTienes m\u00e1s preguntas? Consulta tambi\u00e9n las secciones Uso, Avanzado o crea un issue en GitHub. \u00a1Tu retroalimentaci\u00f3n nos ayuda a mejorar!</p>"},{"location":"advanced/advanced_usage/","title":"Uso Avanzado","text":"<p>En esta secci\u00f3n se presentan temas avanzados como la arquitectura interna de FastOpenAPI, c\u00f3mo extenderlo a nuevos frameworks y c\u00f3mo personalizar la generaci\u00f3n de esquemas o el comportamiento predeterminado. Est\u00e1 pensada para desarrolladores que deseen una integraci\u00f3n profunda o crear adaptadores personalizados.</p>"},{"location":"advanced/advanced_usage/#arquitectura","title":"Arquitectura","text":"<p>FastOpenAPI se inspira en FastAPI pero est\u00e1 dise\u00f1ado para ser independiente del framework. Sus componentes clave son:</p> <ul> <li>BaseRouter: Clase base abstracta que maneja enrutamiento, generaci\u00f3n de esquemas y validaci\u00f3n. No depende de ning\u00fan framework espec\u00edfico.</li> <li>Routers por framework: Subclases de <code>BaseRouter</code> que implementan l\u00f3gica espec\u00edfica para cada framework, como <code>FlaskRouter</code>, <code>StarletteRouter</code>, etc.</li> <li>Modelos Pydantic: Definen y validan datos de entrada/salida.</li> <li>Generaci\u00f3n OpenAPI: Se basa en las rutas, modelos y metadatos definidos por el usuario.</li> <li>Documentaci\u00f3n autom\u00e1tica: Se crean rutas <code>/docs</code>, <code>/redoc</code> y <code>/openapi.json</code>.</li> </ul>"},{"location":"advanced/advanced_usage/#flujo-de-una-solicitud","title":"Flujo de una solicitud","text":"<ol> <li>Una petici\u00f3n llega a una ruta definida con FastOpenAPI.</li> <li>El decorador <code>@router.get</code>, <code>@router.post</code>, etc. ha registrado una funci\u00f3n.</li> <li>Antes de invocar esa funci\u00f3n:</li> <li>Se extraen los par\u00e1metros de ruta.</li> <li>Se validan par\u00e1metros de query/header/body usando Pydantic.</li> <li>Si hay errores, se lanza una respuesta autom\u00e1tica con c\u00f3digo 400 o 422.</li> <li>La funci\u00f3n se ejecuta con par\u00e1metros ya validados.</li> <li>La respuesta se valida con <code>response_model</code> y se convierte a JSON.</li> <li>Si se lanza una excepci\u00f3n como <code>ResourceNotFoundError</code>, se devuelve una respuesta estructurada con c\u00f3digo 404.</li> </ol>"},{"location":"advanced/advanced_usage/#crear-tu-propio-adaptador-router","title":"Crear tu propio adaptador (router)","text":"<p>Puedes extender FastOpenAPI a cualquier framework escribiendo una subclase de <code>BaseRouter</code>.</p>"},{"location":"advanced/advanced_usage/#pasos","title":"Pasos","text":"<ul> <li>Crea una nueva clase que herede de <code>BaseRouter</code>.</li> <li>Implementa m\u00e9todos como:</li> <li><code>add_route()</code> para registrar endpoints.</li> <li><code>include_router()</code> si aplica.</li> <li>L\u00f3gica para registrar <code>/docs</code>, <code>/redoc</code>, <code>/openapi.json</code>.</li> </ul>"},{"location":"advanced/advanced_usage/#ejemplo","title":"Ejemplo","text":"<pre><code>from fastopenapi.base_router import BaseRouter\n\nclass MyCustomRouter(BaseRouter):\n    def add_route(self, path, method, handler):\n        # Aqu\u00ed va la l\u00f3gica del framework\n        pass\n</code></pre>"},{"location":"advanced/advanced_usage/#referencias-utiles","title":"Referencias \u00fatiles","text":"<p>Consulta los archivos: - <code>routers/flask.py</code> - <code>routers/starlette.py</code> - <code>base_router.py</code></p> <p>All\u00ed ver\u00e1s c\u00f3mo se integran los m\u00e9todos comunes y c\u00f3mo cada router traduce el comportamiento a su framework subyacente.</p> <p>FastOpenAPI est\u00e1 dise\u00f1ado para que sea f\u00e1cil agregar soporte para m\u00e1s frameworks o entornos personalizados (microservicios internos, CLI, RPC, etc.).</p>"},{"location":"advanced/api_reference/","title":"Referencia API","text":"<p>Esta secci\u00f3n proporciona una referencia detallada de las clases, funciones y m\u00f3dulos que componen FastOpenAPI. Es \u00fatil para comprender en profundidad las interfaces disponibles y c\u00f3mo usarlas.</p>"},{"location":"advanced/api_reference/#estructura-del-proyecto","title":"Estructura del proyecto","text":"<p>FastOpenAPI usa una arquitectura modular:</p> <pre><code>fastopenapi/\n\u251c\u2500\u2500 base_router.py\n\u2514\u2500\u2500 routers/\n    \u251c\u2500\u2500 aiohttp.py\n    \u251c\u2500\u2500 falcon.py\n    \u251c\u2500\u2500 flask.py\n    \u251c\u2500\u2500 quart.py\n    \u251c\u2500\u2500 sanic.py\n    \u251c\u2500\u2500 starlette.py\n    \u251c\u2500\u2500 tornado.py\n    \u2514\u2500\u2500 django.py\n</code></pre>"},{"location":"advanced/api_reference/#baserouter","title":"BaseRouter","text":"<p>Descripci\u00f3n: Clase base que define la interfaz com\u00fan para todos los routers. No se usa directamente, pero todas las clases de router espec\u00edficas de frameworks heredan de ella.</p> <p>M\u00e9todos clave:</p> <ul> <li><code>BaseRouter.__init__(app)</code>: Inicializa el router con una aplicaci\u00f3n del framework.</li> <li><code>get(path, **options)</code>: Registra una ruta GET.</li> <li><code>post(path, **options)</code>: Registra una ruta POST.</li> <li><code>put(path, **options)</code>: Registra una ruta PUT.</li> <li><code>patch(path, **options)</code>: Registra una ruta PATCH.</li> <li><code>delete(path, **options)</code>: Registra una ruta DELETE.</li> <li><code>include_router(other_router, prefix=\"\")</code>: Permite incluir subrouters.</li> <li><code>generate_openapi_schema()</code>: Devuelve el esquema OpenAPI generado.</li> <li><code>get_openapi_schema()</code>: Igual que el anterior, pero con cach\u00e9.</li> </ul> <p>Atributos:</p> <ul> <li><code>app</code>: Referencia a la app del framework.</li> <li><code>routes</code>: Lista de rutas registradas.</li> <li><code>docs_url</code>, <code>redoc_url</code>, <code>openapi_url</code>: URLs de documentaci\u00f3n generada.</li> <li><code>title</code>, <code>version</code>, <code>description</code>: Metadatos del esquema OpenAPI.</li> </ul>"},{"location":"advanced/api_reference/#routers-por-framework","title":"Routers por framework","text":"<p>FastOpenAPI ofrece una clase de router por framework. Cada uno extiende <code>BaseRouter</code> y adapta las rutas a las interfaces espec\u00edficas del framework.</p>"},{"location":"advanced/api_reference/#aiohttprouter","title":"AioHttpRouter","text":"<pre><code>from aiohttp import web\nfrom fastopenapi.routers import AioHttpRouter\n\napp = web.Application()\nrouter = AioHttpRouter(app=app)\n\n@router.get(\"/status\")\nasync def status():\n    return {\"status\": \"ok\"}\n</code></pre>"},{"location":"advanced/api_reference/#falconrouter","title":"FalconRouter","text":"<pre><code>import falcon.asgi\nfrom fastopenapi.routers import FalconRouter\n\napp = falcon.asgi.App()\nrouter = FalconRouter(app=app)\n\n@router.get(\"/status\")\nasync def status():\n    return {\"status\": \"ok\"}\n</code></pre>"},{"location":"advanced/api_reference/#flaskrouter","title":"FlaskRouter","text":"<pre><code>from flask import Flask\nfrom fastopenapi.routers import FlaskRouter\n\napp = Flask(__name__)\nrouter = FlaskRouter(app=app)\n\n@router.get(\"/hello\")\ndef hello(name: str):\n    return {\"message\": f\"Hello {name}\"}\n</code></pre>"},{"location":"advanced/api_reference/#quartrouter","title":"QuartRouter","text":"<pre><code>from quart import Quart\nfrom fastopenapi.routers import QuartRouter\n\napp = Quart(__name__)\nrouter = QuartRouter(app=app)\n\n@router.get(\"/ping\")\nasync def ping():\n    return {\"pong\": True}\n</code></pre>"},{"location":"advanced/api_reference/#sanicrouter","title":"SanicRouter","text":"<pre><code>from sanic import Sanic\nfrom fastopenapi.routers import SanicRouter\n\napp = Sanic(\"MySanicApp\")\nrouter = SanicRouter(app=app)\n\n@router.get(\"/info\")\nasync def info():\n    return {\"framework\": \"Sanic\", \"status\": \"running\"}\n</code></pre>"},{"location":"advanced/api_reference/#starletterouter","title":"StarletteRouter","text":"<p>Use for Starlette integration.</p> <pre><code>from starlette.applications import Starlette\nfrom fastopenapi.routers import StarletteRouter\n\napp = Starlette()\nrouter = StarletteRouter(app=app)\n\n@router.get(\"/check\")\nasync def check():\n    return {\"status\": \"healthy\"}\n</code></pre>"},{"location":"advanced/api_reference/#tornadorouter","title":"TornadoRouter","text":"<p>Use for Tornado integration.</p> <pre><code>from tornado.web import Application\nfrom fastopenapi.routers import TornadoRouter\n\napp = Application()\nrouter = TornadoRouter(app=app)\n\n@router.get(\"/status\")\ndef status():\n    return {\"running\": True}\n</code></pre>"},{"location":"advanced/api_reference/#djangorouter","title":"DjangoRouter","text":"<p>Use for Django integration.</p> <pre><code>from django.urls import path\nfrom fastopenapi.routers import DjangoRouter\n\nrouter = DjangoRouter(app=True)\n\n@router.get(\"/status\")\nasync def status():\n    return {\"status\": \"ok\"}\n\nurlpatterns = [path(\"\", router.urls)]\n</code></pre>"},{"location":"advanced/api_reference/#subrouters","title":"Subrouters","text":"<p>Puedes dividir tus rutas en m\u00f3dulos reutilizables:</p> <pre><code>user_router = StarletteRouter()\n\n@user_router.get(\"/users\")\ndef list_users():\n    return [{\"id\": 1}, {\"id\": 2}]\n\nmain_router = StarletteRouter(app=app)\nmain_router.include_router(user_router, prefix=\"/v1\")\n</code></pre>"},{"location":"advanced/api_reference/#manejo-de-errores","title":"Manejo de errores","text":"<p>FastOpenAPI permite definir respuestas de error de forma estandarizada. Las excepciones personalizadas como <code>BadRequestError</code> o <code>ResourceNotFoundError</code> se traducen autom\u00e1ticamente a respuestas JSON estructuradas.</p> <pre><code>from fastopenapi.error_handler import ResourceNotFoundError\n\n@router.get(\"/items/{item_id}\")\ndef get_item(item_id: int):\n    item = get_from_db(item_id)\n    if item is None:\n        raise ResourceNotFoundError(f\"\u00cdtem {item_id} no encontrado\")\n    return item\n</code></pre>"},{"location":"advanced/api_reference/#compatibilidad-con-excepciones-del-framework","title":"Compatibilidad con excepciones del framework","text":"<p>FastOpenAPI tambi\u00e9n es compatible con errores del framework:</p>"},{"location":"advanced/api_reference/#aiohttp","title":"AioHTTP","text":"<pre><code>from aiohttp import web\n\n@router.get(\"/notfound\")\ndef aiohttp_notfound():\n    raise web.HTTPNotFound(reason=\"Not Found\")\n</code></pre>"},{"location":"advanced/api_reference/#falcon","title":"Falcon","text":"<pre><code>import falcon\n\n@router.get(\"/notfound\")\nasync def falcon_notfound():\n    raise falcon.HTTPNotFound(title=\"Not Found\", description=\"Falcon error\")\n</code></pre>"},{"location":"advanced/api_reference/#flask","title":"Flask","text":"<pre><code>from flask import abort\n\n@router.get(\"/notfound\")\ndef flask_notfound():\n    abort(404, description=\"Flask error\")\n</code></pre>"},{"location":"advanced/api_reference/#quart","title":"Quart","text":"<pre><code>from quart import abort\n\n@router.get(\"/notfound\")\nasync def quart_notfound():\n    abort(404, description=\"Quart error\")\n</code></pre>"},{"location":"advanced/api_reference/#sanic","title":"Sanic","text":"<pre><code>from sanic import NotFound\n\n@router.get(\"/notfound\")\nasync def sanic_notfound():\n    raise NotFound()\n</code></pre>"},{"location":"advanced/api_reference/#starlette","title":"Starlette","text":"<pre><code>from starlette.exceptions import HTTPException\n\n@router.get(\"/notfound\")\nasync def starlette_notfound():\n    raise HTTPException(status_code=404, detail=\"Not Found\")\n</code></pre>"},{"location":"advanced/api_reference/#tornado","title":"Tornado","text":"<pre><code>from tornado.web import HTTPError\n\n@router.get(\"/notfound\")\nasync def tornado_notfound():\n    raise HTTPError(status_code=404, reason=\"Not Found\")\n</code></pre>"},{"location":"advanced/api_reference/#django","title":"Django","text":"<pre><code>from django.http import Http404\n\n@router.get(\"/notfound\")\ndef django_notfound():\n    raise Http404(\"Django error\")\n</code></pre>"},{"location":"advanced/api_reference/#extension","title":"Extensi\u00f3n","text":"<p>Para extender FastOpenAPI, hereda de <code>BaseRouter</code> y adapta:</p> <ul> <li>el registro de rutas,</li> <li>la inicializaci\u00f3n de documentaci\u00f3n (<code>/docs</code>, <code>/openapi.json</code>),</li> <li>la l\u00f3gica de ejecuci\u00f3n del endpoint.</li> </ul> <p>Consulta el c\u00f3digo fuente y usa los routers existentes como referencia.</p>"},{"location":"frameworks/aiohttp/","title":"Integraci\u00f3n con AIOHTTP","text":"<p>Esta gu\u00eda explica c\u00f3mo utilizar FastOpenAPI con AIOHTTP (un framework HTTP as\u00edncrono).</p> <p>Las aplicaciones con AIOHTTP se construyen t\u00edpicamente con <code>aiohttp.web.Application</code> y se ejecutan usando <code>aiohttp.web.run_app</code>. FastOpenAPI proporciona <code>AioHttpRouter</code> para integrarse con este framework.</p>"},{"location":"frameworks/aiohttp/#instalacion","title":"Instalaci\u00f3n","text":"<p>Aseg\u00farate de tener instalado FastOpenAPI:</p> <pre><code>pip install fastopenapi\n</code></pre> <p>o:</p> <pre><code>pip install fastopenapi[aiohttp]\n</code></pre>"},{"location":"frameworks/aiohttp/#hello-world","title":"Hello World","text":"<pre><code>from aiohttp import web\nfrom pydantic import BaseModel\nfrom fastopenapi.routers import AioHttpRouter\n\napp = web.Application()\nrouter = AioHttpRouter(app=app)\n\nclass HelloResponse(BaseModel):\n    message: str\n\n@router.get(\"/hello\", tags=[\"Hello\"], response_model=HelloResponse)\nasync def hello(name: str):\n    \"\"\"Saludo desde AIOHTTP\"\"\"\n    return HelloResponse(message=f\"Hola, {name}! Esto es aiohttp!\")\n\nif __name__ == \"__main__\":\n    web.run_app(app, host=\"127.0.0.1\", port=8000)\n</code></pre>"},{"location":"frameworks/aiohttp/#proyecto-de-ejemplo","title":"Proyecto de ejemplo","text":"<p>Puedes encontrar un ejemplo funcional en el directorio <code>examples/aiohttp/</code> del repositorio.</p>"},{"location":"frameworks/django/","title":"Integraci\u00f3n con Django","text":"<p>Esta gu\u00eda explica c\u00f3mo usar FastOpenAPI con Django, un framework web de alto rendimiento.</p> <p>El <code>DjangoRouter</code> de FastOpenAPI es compatible con Falcon, especialmente usando su interfaz urls.</p>"},{"location":"frameworks/django/#instalacion","title":"Instalaci\u00f3n","text":"<p>Instala FastOpenAPI:</p> <pre><code>pip install fastopenapi\n</code></pre> <p>o:</p> <pre><code>pip install fastopenapi[django]\n</code></pre>"},{"location":"frameworks/django/#hello-world","title":"Hello World","text":"<pre><code>from django.conf import settings\nfrom django.core.management import call_command\nfrom django.core.wsgi import get_wsgi_application\nfrom django.urls import path\nfrom pydantic import BaseModel\n\nfrom fastopenapi.routers import DjangoRouter\n\nsettings.configure(DEBUG=True, SECRET_KEY=\"__CHANGEME__\", ROOT_URLCONF=__name__)\napplication = get_wsgi_application()\n\nrouter = DjangoRouter(app=True)\n\n\nclass HelloResponse(BaseModel):\n    message: str\n\n\n@router.get(\"/hello\", tags=[\"Hello\"], status_code=200, response_model=HelloResponse)\ndef hello(name: str):\n    \"\"\"Say hello from django\"\"\"\n    return HelloResponse(message=f\"Hello, {name}! It's Django!\")\n\n\nurlpatterns = [path(\"\", router.urls)]\n\nif __name__ == \"__main__\":\n    call_command(\"runserver\")\n\n</code></pre>"},{"location":"frameworks/django/#proyecto-de-ejemplo","title":"Proyecto de ejemplo","text":"<p>Consulta el directorio <code>examples/django/</code> para un ejemplo funcional.</p>"},{"location":"frameworks/falcon/","title":"Integraci\u00f3n con Falcon","text":"<p>Esta gu\u00eda explica c\u00f3mo usar FastOpenAPI con Falcon, un framework web de alto rendimiento.</p> <p>El <code>FalconRouter</code> de FastOpenAPI es compatible con Falcon, especialmente usando su interfaz ASGI para soporte as\u00edncrono.</p>"},{"location":"frameworks/falcon/#instalacion","title":"Instalaci\u00f3n","text":"<p>Instala FastOpenAPI:</p> <pre><code>pip install fastopenapi\n</code></pre> <p>o:</p> <pre><code>pip install fastopenapi[falcon]\n</code></pre>"},{"location":"frameworks/falcon/#hello-world","title":"Hello World","text":"<pre><code>import falcon.asgi\nimport uvicorn\nfrom pydantic import BaseModel\nfrom fastopenapi.routers import FalconRouter\n\napp = falcon.asgi.App()\nrouter = FalconRouter(app=app)\n\nclass HelloResponse(BaseModel):\n    message: str\n\n@router.get(\"/hello\", tags=[\"Hello\"], response_model=HelloResponse)\nasync def hello(name: str):\n    \"\"\"Saludo desde Falcon\"\"\"\n    return HelloResponse(message=f\"Hola, {name}! Esto es Falcon!\")\n\nif __name__ == \"__main__\":\n    uvicorn.run(app, host=\"127.0.0.1\", port=8000)\n</code></pre>"},{"location":"frameworks/falcon/#proyecto-de-ejemplo","title":"Proyecto de ejemplo","text":"<p>Consulta el directorio <code>examples/falcon/</code> para un ejemplo funcional.</p>"},{"location":"frameworks/flask/","title":"Integraci\u00f3n con Flask","text":"<p>Esta gu\u00eda muestra c\u00f3mo integrar FastOpenAPI con Flask, uno de los frameworks web m\u00e1s populares de Python.</p> <p>La clase <code>FlaskRouter</code> conecta FastOpenAPI con el sistema de rutas de Flask.</p>"},{"location":"frameworks/flask/#instalacion","title":"Instalaci\u00f3n","text":"<p>Instala FastOpenAPI:</p> <pre><code>pip install fastopenapi\n</code></pre> <p>o:</p> <pre><code>pip install fastopenapi[flask]\n</code></pre>"},{"location":"frameworks/flask/#hello-world","title":"Hello World","text":"<pre><code>from flask import Flask\nfrom pydantic import BaseModel\nfrom fastopenapi.routers import FlaskRouter\n\napp = Flask(__name__)\nrouter = FlaskRouter(app=app)  # Enlazar con FastOpenAPI\n\nclass HelloResponse(BaseModel):\n    message: str\n\n@router.get(\"/hello\", tags=[\"Hello\"], response_model=HelloResponse)\ndef hello(name: str):\n    \"\"\"Saludo desde Flask\"\"\"\n    return HelloResponse(message=f\"Hola, {name}! Esto es Flask!\")\n\nif __name__ == \"__main__\":\n    app.run(port=8000)\n</code></pre>"},{"location":"frameworks/flask/#proyecto-de-ejemplo","title":"Proyecto de ejemplo","text":"<p>Consulta el directorio <code>examples/flask/</code> para ver un ejemplo funcional.</p>"},{"location":"frameworks/quart/","title":"Integraci\u00f3n con Quart","text":"<p>Quart es un framework web as\u00edncrono con una API muy similar a Flask (es un reemplazo directo compatible con async).</p> <p>FastOpenAPI proporciona <code>QuartRouter</code> para integrarse con aplicaciones construidas en Quart.</p>"},{"location":"frameworks/quart/#instalacion","title":"Instalaci\u00f3n","text":"<p>Instala FastOpenAPI:</p> <pre><code>pip install fastopenapi\n</code></pre> <p>o:</p> <pre><code>pip install fastopenapi[quart]\n</code></pre>"},{"location":"frameworks/quart/#hello-world","title":"Hello World","text":"<pre><code>from quart import Quart\nfrom pydantic import BaseModel\nfrom fastopenapi.routers import QuartRouter\n\napp = Quart(__name__)\nrouter = QuartRouter(app=app)\n\nclass HelloResponse(BaseModel):\n    message: str\n\n@router.get(\"/hello\", tags=[\"Hello\"], response_model=HelloResponse)\nasync def hello(name: str):\n    \"\"\"Saludo desde Quart\"\"\"\n    return HelloResponse(message=f\"Hola, {name}! Esto es Quart!\")\n\nif __name__ == \"__main__\":\n    app.run(port=8000)\n</code></pre>"},{"location":"frameworks/quart/#proyecto-de-ejemplo","title":"Proyecto de ejemplo","text":"<p>Consulta el directorio <code>examples/quart/</code> para ver un ejemplo completo.</p>"},{"location":"frameworks/sanic/","title":"Integraci\u00f3n con Sanic","text":"<p>Sanic es un framework web as\u00edncrono conocido por su alto rendimiento.</p> <p>FastOpenAPI se integra con Sanic a trav\u00e9s de <code>SanicRouter</code>.</p>"},{"location":"frameworks/sanic/#instalacion","title":"Instalaci\u00f3n","text":"<p>Instala FastOpenAPI:</p> <pre><code>pip install fastopenapi\n</code></pre> <p>o:</p> <pre><code>pip install fastopenapi[sanic]\n</code></pre>"},{"location":"frameworks/sanic/#hello-world","title":"Hello World","text":"<pre><code>from sanic import Sanic\nfrom pydantic import BaseModel\nfrom fastopenapi.routers import SanicRouter\n\napp = Sanic(\"MySanicApp\")\nrouter = SanicRouter(app=app)\n\nclass HelloResponse(BaseModel):\n    message: str\n\n@router.get(\"/hello\", tags=[\"Hello\"], response_model=HelloResponse)\nasync def hello(name: str):\n    \"\"\"Saludo desde Sanic\"\"\"\n    return HelloResponse(message=f\"Hola, {name}! Esto es Sanic!\")\n\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=8000)\n</code></pre>"},{"location":"frameworks/sanic/#proyecto-de-ejemplo","title":"Proyecto de ejemplo","text":"<p>Puedes consultar el directorio <code>examples/sanic/</code> para ver un ejemplo funcional.</p>"},{"location":"frameworks/starlette/","title":"Integraci\u00f3n con Starlette","text":"<p>Starlette es un framework ASGI liviano sobre el que est\u00e1 construido FastAPI.</p> <p><code>StarletteRouter</code> de FastOpenAPI permite utilizar FastOpenAPI directamente en aplicaciones Starlette.</p>"},{"location":"frameworks/starlette/#instalacion","title":"Instalaci\u00f3n","text":"<p>Instala FastOpenAPI:</p> <pre><code>pip install fastopenapi\n</code></pre> <p>o:</p> <pre><code>pip install fastopenapi[starlette]\n</code></pre>"},{"location":"frameworks/starlette/#hello-world","title":"Hello World","text":"<pre><code>import uvicorn\nfrom pydantic import BaseModel\nfrom starlette.applications import Starlette\nfrom fastopenapi.routers import StarletteRouter\n\napp = Starlette()\nrouter = StarletteRouter(app=app)\n\nclass HelloResponse(BaseModel):\n    message: str\n\n@router.get(\"/hello\", tags=[\"Hello\"], response_model=HelloResponse)\nasync def hello(name: str):\n    \"\"\"Saludo desde Starlette\"\"\"\n    return HelloResponse(message=f\"Hola, {name}! Esto es Starlette!\")\n\nif __name__ == \"__main__\":\n    uvicorn.run(app, host=\"127.0.0.1\", port=8000)\n</code></pre>"},{"location":"frameworks/starlette/#proyecto-de-ejemplo","title":"Proyecto de ejemplo","text":"<p>Consulta el directorio <code>examples/starlette/</code> para ver un ejemplo funcional.</p>"},{"location":"frameworks/tornado/","title":"Integraci\u00f3n con Tornado","text":"<p>Tornado es un framework web maduro y una biblioteca de red as\u00edncrona para Python.</p> <p>FastOpenAPI es compatible con Tornado mediante <code>TornadoRouter</code>, lo que permite a\u00f1adir documentaci\u00f3n OpenAPI a las aplicaciones Tornado.</p>"},{"location":"frameworks/tornado/#instalacion","title":"Instalaci\u00f3n","text":"<p>Instala FastOpenAPI:</p> <pre><code>pip install fastopenapi\n</code></pre> <p>o</p> <pre><code>pip install fastopenapi[tornado]\n</code></pre>"},{"location":"frameworks/tornado/#hello-world","title":"Hello World","text":"<pre><code>import asyncio\nfrom pydantic import BaseModel\nfrom tornado.web import Application\nfrom fastopenapi.routers import TornadoRouter\n\napp = Application()\nrouter = TornadoRouter(app=app)\n\nclass HelloResponse(BaseModel):\n    message: str\n\n@router.get(\"/hello\", tags=[\"Hello\"], response_model=HelloResponse)\ndef hello(name: str):\n    \"\"\"Saludo desde Tornado\"\"\"\n    return HelloResponse(message=f\"Hola, {name}! Esto es Tornado!\")\n\nasync def main():\n    app.listen(8000)\n    await asyncio.Event().wait()\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"frameworks/tornado/#proyecto-de-ejemplo","title":"Proyecto de ejemplo","text":"<p>Consulta el directorio <code>examples/tornado/</code> del repositorio.</p>"},{"location":"getting_started/installation/","title":"Instalaci\u00f3n","text":"<p>FastOpenAPI est\u00e1 disponible en PyPI y es compatible con Python 3.10 o superior. Puedes instalar solo la biblioteca principal o incluir dependencias opcionales para frameworks web espec\u00edficos.</p>"},{"location":"getting_started/installation/#requisitos-previos","title":"Requisitos previos","text":"<ul> <li>Python 3.10 o superior \u2013 requerido debido al uso de tipado moderno y Pydantic v2.</li> <li>(Opcional) Un framework web existente (como Flask, Starlette, etc.), si planeas integrarlo. Si no lo tienes instalado, puedes usar los extras para instalarlo junto con FastOpenAPI.</li> </ul>"},{"location":"getting_started/installation/#instalacion-con-pip","title":"Instalaci\u00f3n con pip","text":""},{"location":"getting_started/installation/#solo-instalar-fastopenapi","title":"Solo instalar FastOpenAPI","text":"<p>Instalaci\u00f3n b\u00e1sica:</p> <pre><code>pip install fastopenapi\n</code></pre>"},{"location":"getting_started/installation/#instalar-fastopenapi-con-un-framework-especifico","title":"Instalar FastOpenAPI con un framework espec\u00edfico","text":"<p>\u00datil si comienzas un nuevo servicio sin haber instalado a\u00fan el framework:</p> <pre><code>pip install fastopenapi[aiohttp]\n</code></pre> <pre><code>pip install fastopenapi[falcon]\n</code></pre> <pre><code>pip install fastopenapi[flask]\n</code></pre> <pre><code>pip install fastopenapi[quart]\n</code></pre> <pre><code>pip install fastopenapi[sanic]\n</code></pre> <pre><code>pip install fastopenapi[starlette]\n</code></pre> <pre><code>pip install fastopenapi[tornado]\n</code></pre> <pre><code>pip install fastopenapi[django]\n</code></pre>"},{"location":"getting_started/quickstart/","title":"Inicio R\u00e1pido","text":"<p>Esta gu\u00eda te mostrar\u00e1 c\u00f3mo a\u00f1adir FastOpenAPI a una aplicaci\u00f3n sencilla y c\u00f3mo ver la documentaci\u00f3n API generada autom\u00e1ticamente.</p>"},{"location":"getting_started/quickstart/#paso-0-instalar-la-biblioteca","title":"Paso 0. Instalar la biblioteca","text":"<p>Sigue las instrucciones de la secci\u00f3n Instalaci\u00f3n</p>"},{"location":"getting_started/quickstart/#paso-1-crear-una-aplicacion","title":"Paso 1. Crear una aplicaci\u00f3n","text":"<ul> <li>Crea un archivo llamado <code>main.py</code></li> <li>Copia el c\u00f3digo desde uno de los ejemplos</li> <li>Algunos ejemplos requieren uvicorn (<code>pip install uvicorn</code>)</li> </ul>"},{"location":"getting_started/quickstart/#ejemplos","title":"Ejemplos","text":""},{"location":"getting_started/quickstart/#aiohttp","title":"AioHTTP","text":"Click to expand the AioHttp Example <pre><code>from aiohttp import web\nfrom pydantic import BaseModel\n\nfrom fastopenapi.routers import AioHttpRouter\n\napp = web.Application()\nrouter = AioHttpRouter(app=app)\n\n\nclass HelloResponse(BaseModel):\n    message: str\n\n\n@router.get(\"/hello\", tags=[\"Hello\"], status_code=200, response_model=HelloResponse)\nasync def hello(name: str):\n    \"\"\"Say hello from aiohttp\"\"\"\n    return HelloResponse(message=f\"Hello, {name}! It's aiohttp!\")\n\n\nif __name__ == \"__main__\":\n    web.run_app(app, host=\"127.0.0.1\", port=8000)\n</code></pre>"},{"location":"getting_started/quickstart/#falcon","title":"Falcon","text":"Click to expand the Falcon Example <pre><code>import falcon.asgi\nimport uvicorn\nfrom pydantic import BaseModel\n\nfrom fastopenapi.routers import FalconRouter\n\napp = falcon.asgi.App()\nrouter = FalconRouter(app=app)\n\n\nclass HelloResponse(BaseModel):\n    message: str\n\n\n@router.get(\"/hello\", tags=[\"Hello\"], status_code=200, response_model=HelloResponse)\nasync def hello(name: str):\n    \"\"\"Say hello from Falcon\"\"\"\n    return HelloResponse(message=f\"Hello, {name}! It's Falcon!\")\n\n\nif __name__ == \"__main__\":\n    uvicorn.run(app, host=\"127.0.0.1\", port=8000)\n\n</code></pre>"},{"location":"getting_started/quickstart/#flask","title":"Flask","text":"Click to expand the Flask Example <pre><code>from flask import Flask\nfrom pydantic import BaseModel\n\nfrom fastopenapi.routers import FlaskRouter\n\napp = Flask(__name__)\nrouter = FlaskRouter(app=app)\n\n\nclass HelloResponse(BaseModel):\n    message: str\n\n\n@router.get(\"/hello\", tags=[\"Hello\"], status_code=200, response_model=HelloResponse)\ndef hello(name: str):\n    \"\"\"Say hello from Flask\"\"\"\n    return HelloResponse(message=f\"Hello, {name}! It's Flask!\")\n\n\nif __name__ == \"__main__\":\n    app.run(port=8000)\n\n</code></pre>"},{"location":"getting_started/quickstart/#quart","title":"Quart","text":"Click to expand the Quart Example <pre><code>from pydantic import BaseModel\nfrom quart import Quart\n\nfrom fastopenapi.routers import QuartRouter\n\napp = Quart(__name__)\nrouter = QuartRouter(app=app)\n\n\nclass HelloResponse(BaseModel):\n    message: str\n\n\n@router.get(\"/hello\", tags=[\"Hello\"], status_code=200, response_model=HelloResponse)\nasync def hello(name: str):\n    \"\"\"Say hello from Quart\"\"\"\n    return HelloResponse(message=f\"Hello, {name}! It's Quart!\")\n\n\nif __name__ == \"__main__\":\n    app.run(port=8000)\n\n</code></pre>"},{"location":"getting_started/quickstart/#sanic","title":"Sanic","text":"Click to expand the Sanic Example <pre><code>from pydantic import BaseModel\nfrom sanic import Sanic\n\nfrom fastopenapi.routers import SanicRouter\n\napp = Sanic(\"MySanicApp\")\nrouter = SanicRouter(app=app)\n\n\nclass HelloResponse(BaseModel):\n    message: str\n\n\n@router.get(\"/hello\", tags=[\"Hello\"], status_code=200, response_model=HelloResponse)\nasync def hello(name: str):\n    \"\"\"Say hello from Sanic\"\"\"\n    return HelloResponse(message=f\"Hello, {name}! It's Sanic!\")\n\n\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=8000)\n\n</code></pre>"},{"location":"getting_started/quickstart/#starlette","title":"Starlette","text":"Click to expand the Starlette Example <pre><code>import uvicorn\nfrom pydantic import BaseModel\nfrom starlette.applications import Starlette\n\nfrom fastopenapi.routers import StarletteRouter\n\napp = Starlette()\nrouter = StarletteRouter(app=app)\n\n\nclass HelloResponse(BaseModel):\n    message: str\n\n\n@router.get(\"/hello\", tags=[\"Hello\"], status_code=200, response_model=HelloResponse)\nasync def hello(name: str):\n    \"\"\"Say hello from Starlette\"\"\"\n    return HelloResponse(message=f\"Hello, {name}! It's Starlette!\")\n\nif __name__ == \"__main__\":\n    uvicorn.run(app, host=\"127.0.0.1\", port=8000)\n\n</code></pre>"},{"location":"getting_started/quickstart/#tornado","title":"Tornado","text":"Click to expand the Tornado Example <pre><code>import asyncio\nfrom pydantic import BaseModel\nfrom tornado.web import Application\nfrom fastopenapi.routers.tornado import TornadoRouter\n\napp = Application()\nrouter = TornadoRouter(app=app)\n\nclass HelloResponse(BaseModel):\n    message: str\n\n@router.get(\"/hello\", tags=[\"Hello\"], status_code=200, response_model=HelloResponse)\ndef hello(name: str):\n    \"\"\"Say hello from Tornado\"\"\"\n    return HelloResponse(message=f\"Hello, {name}! It's Tornado!\")\n\nasync def main():\n    app.listen(8000)\n    await asyncio.Event().wait()\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n\n</code></pre>"},{"location":"getting_started/quickstart/#django","title":"Django","text":"Click to expand the Django Example <pre><code>from django.conf import settings\nfrom django.core.management import call_command\nfrom django.core.wsgi import get_wsgi_application\nfrom django.urls import path\nfrom pydantic import BaseModel\n\nfrom fastopenapi.routers import DjangoRouter\n\nsettings.configure(DEBUG=True, SECRET_KEY=\"__CHANGEME__\", ROOT_URLCONF=__name__)\napplication = get_wsgi_application()\n\nrouter = DjangoRouter(app=True)\n\n\nclass HelloResponse(BaseModel):\n    message: str\n\n\n@router.get(\"/hello\", tags=[\"Hello\"], status_code=200, response_model=HelloResponse)\ndef hello(name: str):\n    \"\"\"Say hello from django\"\"\"\n    return HelloResponse(message=f\"Hello, {name}! It's Django!\")\n\n\nurlpatterns = [path(\"\", router.urls)]\n\nif __name__ == \"__main__\":\n    call_command(\"runserver\")\n</code></pre>"},{"location":"getting_started/quickstart/#paso-2-ejecutar-el-servidor","title":"Paso 2. Ejecutar el servidor","text":"<pre><code>python main.py\n</code></pre> <p>Una vez que est\u00e9 corriendo, abre tu navegador:</p>"},{"location":"getting_started/quickstart/#swagger-ui","title":"Swagger UI","text":"<pre><code>http://127.0.0.1:8000/docs\n</code></pre>"},{"location":"getting_started/quickstart/#redoc","title":"ReDoc","text":"<pre><code>http://127.0.0.1:8000/redoc\n</code></pre>"},{"location":"getting_started/quickstart/#rutas-generadas-automaticamente","title":"Rutas generadas autom\u00e1ticamente","text":"<ul> <li>Swagger UI: http://localhost:8000/docs  </li> <li>ReDoc: http://localhost:8000/redoc  </li> <li>OpenAPI JSON: http://localhost:8000/openapi.json</li> </ul>"},{"location":"getting_started/usage/","title":"Uso","text":"<p>En esta secci\u00f3n se explica c\u00f3mo usar FastOpenAPI para documentar rutas de API y validar entradas/salidas. Se incluyen ejemplos para distintos escenarios, incluida la gesti\u00f3n de errores tanto con la biblioteca como con el framework subyacente.</p>"},{"location":"getting_started/usage/#definicion-de-rutas","title":"Definici\u00f3n de rutas","text":""},{"location":"getting_started/usage/#metodos-disponibles","title":"M\u00e9todos disponibles","text":"<ul> <li><code>@router.get(path, response_errors, response_model, tags, status_code)</code></li> <li><code>@router.post(path, response_errors, response_model, tags, status_code)</code></li> <li><code>@router.patch(path, response_errors, response_model, tags, status_code)</code></li> <li><code>@router.put(path, response_errors, response_model, tags, status_code)</code></li> <li><code>@router.delete(path, response_errors, response_model, tags, status_code)</code></li> </ul>"},{"location":"getting_started/usage/#descripcion-rapida","title":"Descripci\u00f3n r\u00e1pida","text":"<ul> <li><code>path</code> \u2013 ruta de la API.</li> <li><code>response_errors</code> \u2013 lista de posibles c\u00f3digos de error para OpenAPI.</li> <li><code>response_model</code> \u2013 modelo Pydantic o tipo simple (str, int, etc.) para validar la respuesta.</li> <li><code>tags</code> \u2013 etiquetas OpenAPI para agrupar rutas.</li> <li><code>status_code</code> \u2013 c\u00f3digo de estado HTTP por defecto.</li> </ul>"},{"location":"getting_started/usage/#ejemplo-basico","title":"Ejemplo b\u00e1sico","text":"<pre><code>from pydantic import BaseModel\nfrom typing import Optional\nfrom fastopenapi.base_router import BaseRouter\n\nclass CreateUserRequest(BaseModel):\n    name: str\n    surname: str\n    age: int\n\nclass UpdateUserRequest(BaseModel):\n    name: Optional[str]\n    surname: Optional[str]\n    age: Optional[int]\n\nclass UserResponse(BaseModel):\n    id: int\n    name: str\n    surname: str\n    age: int\n\nrouter = BaseRouter()\n\n@router.get(\"/user/{user_id}\", tags=[\"User\"], status_code=200, response_model=UserResponse)\ndef get_user(user_id: int):\n    data = {}\n    return UserResponse(**data)\n\n@router.post(\"/user\", tags=[\"User\"], status_code=201, response_model=UserResponse)\ndef create_user(user_data: CreateUserRequest):\n    data = {}\n    return UserResponse(**data)\n\n@router.patch(\"/user/{user_id}\", tags=[\"User\"], status_code=200, response_model=UserResponse)\ndef update_user(user_id: int, user_data: UpdateUserRequest):\n    data = {}\n    return UserResponse(**data)\n\n@router.delete(\"/user/{user_id}\", tags=[\"User\"], status_code=204)\ndef delete_user(user_id: int):\n    return None\n</code></pre>"},{"location":"getting_started/usage/#parametros-de-ruta","title":"Par\u00e1metros de ruta","text":"<pre><code>@router.get(\"/items/{item_id}\")\nasync def get_item(item_id: int):\n    item = database.get(item_id)\n    if item is None:\n        raise ResourceNotFoundError(f\"\u00cdtem {item_id} no encontrado\")\n    return item\n</code></pre>"},{"location":"getting_started/usage/#parametros-de-consulta-query","title":"Par\u00e1metros de consulta (query)","text":"<pre><code>@router.get(\"/search\")\nasync def search(q: str = \"\", limit: int = 10):\n    if limit &lt; 0:\n        raise BadRequestError(\"El l\u00edmite no puede ser negativo\")\n    return {\"query\": q, \"limit\": limit}\n</code></pre>"},{"location":"getting_started/usage/#validacion-con-modelos-pydantic-cuerpo-de-la-solicitud","title":"Validaci\u00f3n con modelos Pydantic (cuerpo de la solicitud)","text":"<pre><code>from flask import abort\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    price: float\n\n@router.post(\"/items\", response_model=Item, status_code=201)\ndef create_item(item: Item):\n    try:\n        save_to_database(item)\n    except DatabaseError:\n        abort(500, description=\"Error en base de datos\")\n    return item\n</code></pre>"},{"location":"getting_started/usage/#subrouters-modularizacion","title":"Subrouters (modularizaci\u00f3n)","text":"<p>Archivo: users.py</p> <pre><code>from fastopenapi.routers import StarletteRouter\nfrom pydantic import BaseModel\nfrom typing import List\n\nuser_router = StarletteRouter()\n\nclass User(BaseModel):\n    id: int\n    name: str\n\n@user_router.get(\"/users\", response_model=List[User])\nasync def list_users():\n    return [{\"id\": 1, \"name\": \"Alice\"}, {\"id\": 2, \"name\": \"Bob\"}]\n</code></pre> <p>Archivo: main.py</p> <pre><code>from fastopenapi.routers import StarletteRouter\nfrom starlette.applications import Starlette\nfrom users import user_router\n\napp = Starlette()\nmain_router = StarletteRouter(app=app)\nmain_router.include_router(user_router, prefix=\"/v1\")\n</code></pre>"},{"location":"getting_started/usage/#manejo-de-errores","title":"Manejo de errores","text":""},{"location":"getting_started/usage/#errores-internos-de-fastopenapi","title":"Errores internos de FastOpenAPI","text":"<pre><code>from fastopenapi.error_handler import ResourceNotFoundError\n\n@router.get(\"/products/{product_id}\")\nasync def get_product(product_id: int):\n    product = db.get(product_id)\n    if product is None:\n        raise ResourceNotFoundError(f\"Producto {product_id} no encontrado\")\n    return product\n</code></pre>"},{"location":"getting_started/usage/#errores-especificos-del-framework","title":"Errores espec\u00edficos del framework","text":""},{"location":"getting_started/usage/#flask","title":"Flask","text":"<pre><code>from flask import abort\n\n@router.get(\"/orders/{order_id}\")\ndef get_order(order_id: int):\n    order = get_order_from_db(order_id)\n    if order is None:\n        abort(404, description=\"Orden no encontrada\")\n    return order\n</code></pre>"},{"location":"getting_started/usage/#falcon","title":"Falcon","text":"<pre><code>import falcon\n\n@router.get(\"/invoices/{invoice_id}\")\nasync def get_invoice(invoice_id: int):\n    invoice = db.get(invoice_id)\n    if invoice is None:\n        raise falcon.HTTPNotFound(title=\"No encontrado\", description=\"Factura no encontrada\")\n    return invoice\n</code></pre>"},{"location":"getting_started/usage/#ejemplos-completos","title":"Ejemplos completos","text":"<p>Consulta el directorio <code>examples/</code> para ver implementaciones funcionales por framework.</p>"}]}
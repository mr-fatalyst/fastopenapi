{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"FastOpenAPI","text":"<p> FastOpenAPI est une biblioth\u00e8que permettant de g\u00e9n\u00e9rer et d'int\u00e9grer des sch\u00e9mas OpenAPI \u00e0 l'aide de Pydantic et de plusieurs frameworks. </p> <p>   Ce projet est inspir\u00e9 de FastAPI et vise \u00e0 offrir une exp\u00e9rience d\u00e9veloppeur tout aussi agr\u00e9able. </p> <p> </p>"},{"location":"#a-propos-du-projet","title":"\u00c0 propos du projet","text":"<p>FastOpenAPI est une biblioth\u00e8que Python permettant de g\u00e9n\u00e9rer et d\u2019int\u00e9grer des sch\u00e9mas OpenAPI \u00e0 partir de mod\u00e8les Pydantic dans divers frameworks web. Inspir\u00e9e par FastAPI, elle propose une exp\u00e9rience similaire, mais applicable \u00e0 des frameworks comme AIOHTTP, Falcon, Flask, Quart, Sanic, Starlette, Tornado et Django. Avec FastOpenAPI, vous pouvez ajouter une documentation interactive et une validation automatique \u00e0 vos projets existants sans changer de framework.</p> <p>FastOpenAPI est encore en d\u00e9veloppement actif (pr\u00e9-version 1.0), mais elle est d\u00e9j\u00e0 suffisamment stable pour \u00eatre utilis\u00e9e. Toute contribution est la bienvenue !</p>"},{"location":"#fonctionnalites","title":"Fonctionnalit\u00e9s","text":"<ul> <li>G\u00e9n\u00e9ration automatique d\u2019OpenAPI \u2013 d\u00e9finissez vos routes et vos mod\u00e8les, FastOpenAPI g\u00e9n\u00e8re automatiquement un sch\u00e9ma complet.</li> <li>Compatible avec Pydantic v2 \u2013 validation et s\u00e9rialisation robustes pour les entr\u00e9es et les r\u00e9ponses.</li> <li>Multi-framework \u2013 support pour AIOHTTP, Falcon, Flask, Quart, Sanic, Starlette, Tornado et Django.</li> <li>Syntaxe proche de FastAPI \u2013 d\u00e9corateurs comme <code>@router.get</code>, <code>@router.post</code>, etc.</li> <li>Documentation interactive int\u00e9gr\u00e9e \u2013 Swagger UI (<code>/docs</code>) et ReDoc (<code>/redoc</code>) inclus.</li> <li>Validation et gestion des erreurs \u2013 erreurs automatiquement retourn\u00e9es en JSON, avec classes standard comme <code>BadRequestError</code>, <code>ResourceNotFoundError</code>.</li> </ul> <p>Utilisez la navigation \u00e0 gauche pour parcourir la documentation. Commencez par les sections Installation et D\u00e9marrage rapide, puis passez \u00e0 Utilisation. Chaque framework est trait\u00e9 dans une section d\u00e9di\u00e9e. Les sujets avanc\u00e9s sont regroup\u00e9s dans Utilisation avanc\u00e9e et R\u00e9f\u00e9rence API. Vous souhaitez contribuer ? Consultez la section Contribuer. Les changements r\u00e9cents sont list\u00e9s dans le Changelog, et les questions fr\u00e9quentes dans la FAQ.</p>"},{"location":"changelog/","title":"Journal des modifications (Changelog)","text":"<p>Toutes les modifications importantes de FastOpenAPI sont document\u00e9es dans ce fichier.</p>"},{"location":"changelog/#050-2025-04-13","title":"[0.5.0] \u2013 2025-04-13","text":""},{"location":"changelog/#ajoute","title":"Ajout\u00e9","text":"<ul> <li>AioHttpRouter pour l\u2019int\u00e9gration avec le framework AIOHTTP (prise en charge asynchrone).</li> <li>Cache au niveau de la classe pour les sch\u00e9mas de mod\u00e8les Pydantic (am\u00e9liore les performances en \u00e9vitant de r\u00e9g\u00e9n\u00e9rer les m\u00eames sch\u00e9mas).</li> <li>Param\u00e8tre <code>response_errors</code> dans les d\u00e9corateurs de routes pour documenter les erreurs dans OpenAPI.</li> <li>Module <code>error_handler</code> pour les r\u00e9ponses d\u2019erreur standardis\u00e9es (avec classes comme <code>BadRequestError</code>, <code>ResourceNotFoundError</code>, etc.).</li> <li>Prise en charge des types simples (<code>int</code>, <code>float</code>, <code>bool</code>, <code>str</code>) comme <code>response_model</code>.</li> </ul>"},{"location":"changelog/#040-20032025","title":"[0.4.0] \u2013 20/03/2025","text":""},{"location":"changelog/#ajoute_1","title":"Ajout\u00e9","text":"<ul> <li>Prise en charge de ReDoc UI (disponible sur <code>/redoc</code>).</li> <li>TornadoRouter pour le framework Tornado.</li> </ul>"},{"location":"changelog/#modifie","title":"Modifi\u00e9","text":"<ul> <li>Refactorisation des tests pour am\u00e9liorer la couverture et la fiabilit\u00e9.</li> </ul>"},{"location":"changelog/#corrige","title":"Corrig\u00e9","text":"<ul> <li>Erreurs internes : passage du code 422 \u00e0 500 (conformit\u00e9 HTTP).</li> </ul>"},{"location":"changelog/#supprime","title":"Supprim\u00e9","text":"<ul> <li>M\u00e9thodes <code>add_docs_route</code> et <code>add_openapi_route</code> retir\u00e9es de <code>BaseRouter</code> (les routes sont maintenant ajout\u00e9es automatiquement).</li> </ul>"},{"location":"changelog/#031-15032025","title":"[0.3.1] \u2013 15/03/2025","text":""},{"location":"changelog/#corrige_1","title":"Corrig\u00e9","text":"<ul> <li>Erreur d'importation lorsque les frameworks ne sont pas install\u00e9s (<code>ModuleNotFoundError</code> g\u00e9r\u00e9).</li> </ul>"},{"location":"changelog/#030-15032025","title":"[0.3.0] \u2013 15/03/2025","text":""},{"location":"changelog/#ajoute_2","title":"Ajout\u00e9","text":"<ul> <li>QuartRouter pour le framework Quart (async).</li> <li>Premi\u00e8re version de la documentation (introduction et exemples).</li> </ul>"},{"location":"changelog/#modifie_1","title":"Modifi\u00e9","text":"<ul> <li>Simplification de l'import : <code>from fastopenapi.routers import YourRouter</code>.</li> </ul>"},{"location":"changelog/#corrige_2","title":"Corrig\u00e9","text":"<ul> <li>Prise en charge correcte des mod\u00e8les Pydantic dans les requ\u00eates GET.</li> </ul>"},{"location":"changelog/#021-12032025","title":"[0.2.1] \u2013 12/03/2025","text":""},{"location":"changelog/#corrige_3","title":"Corrig\u00e9","text":"<ul> <li>Probl\u00e8me de s\u00e9rialisation : <code>_serialize_response</code> convertit maintenant les mod\u00e8les en <code>dict</code> avant de les encoder.</li> <li>Correction de cas d\u2019erreur dans <code>DataLoader</code> avec donn\u00e9es vides.</li> <li>Tests suppl\u00e9mentaires pour couvrir ces cas.</li> <li>Ajout de ce fichier <code>CHANGELOG.md</code>.</li> </ul>"},{"location":"changelog/#020-11032025","title":"[0.2.0] \u2013 11/03/2025","text":""},{"location":"changelog/#ajoute_3","title":"Ajout\u00e9","text":"<ul> <li>Fonction <code>resolve_endpoint_params</code> dans <code>BaseRouter</code> (extraction de param\u00e8tres : path, query, body).</li> <li>Prise en charge du <code>prefix</code> dans <code>include_router</code> pour grouper les routes.</li> <li>Prise en charge du param\u00e8tre <code>status_code</code> dans les d\u00e9corateurs.</li> </ul>"},{"location":"changelog/#modifie_2","title":"Modifi\u00e9","text":"<ul> <li>Refactorisation des routeurs pour plus de coh\u00e9rence et de r\u00e9utilisabilit\u00e9.</li> </ul>"},{"location":"changelog/#supprime_1","title":"Supprim\u00e9","text":"<ul> <li>Suppression de <code>register_routes</code> dans l\u2019impl\u00e9mentation Starlette (obsol\u00e8te apr\u00e8s refactorisation).</li> </ul>"},{"location":"changelog/#010-01032025","title":"[0.1.0] \u2013 01/03/2025","text":""},{"location":"changelog/#ajoute_4","title":"Ajout\u00e9","text":"<ul> <li>Premi\u00e8re publication de FastOpenAPI.</li> <li>Fonctionnalit\u00e9s de base :</li> <li>Classe <code>BaseRouter</code></li> <li>Prise en charge de Falcon, Flask, Sanic, Starlette</li> <li>G\u00e9n\u00e9ration d\u2019OpenAPI via Pydantic v2</li> <li>Validation des param\u00e8tres et corps</li> <li>Ajout du README et d\u2019exemples simples.</li> <li>Tests initiaux de g\u00e9n\u00e9ration de sch\u00e9ma et d\u2019enregistrement des routes.</li> </ul>"},{"location":"contributing/","title":"Bienvenue !","text":"<p>Merci de vouloir contribuer \u00e0 FastOpenAPI \ud83c\udf89 Ce guide vous explique comment d\u00e9marrer, proposer des contributions, \u00e9crire des commits, ouvrir des pull requests et ex\u00e9cuter les tests.</p>"},{"location":"contributing/#configuration-et-execution","title":"Configuration et ex\u00e9cution","text":"<p>Installez les d\u00e9pendances avec :</p> <pre><code># Fork the repo on GitHub first, then:\ngit clone https://github.com/yourusername/fastopenapi.git\ncd fastopenapi\npoetry install\n</code></pre> <p>Si vous n\u2019utilisez pas <code>poetry</code>, vous pouvez installer manuellement :</p> <pre><code>pip install -e .[dev]\n</code></pre>"},{"location":"contributing/#structure-du-projet","title":"Structure du projet","text":"<ul> <li><code>fastopenapi/</code> \u2014 biblioth\u00e8que principale</li> <li><code>examples/</code> \u2014 exemples pour chaque framework</li> <li><code>tests/</code> \u2014 tests unitaires</li> <li><code>benchmarks/</code> \u2014 tests de performance</li> <li><code>docs/</code> \u2014 documentation multi-langue</li> </ul>"},{"location":"contributing/#execution-des-tests","title":"Ex\u00e9cution des tests","text":"<p>Lancez tous les tests avec :</p> <pre><code>pytest\n</code></pre> <p>Les tests couvrent la logique principale ainsi que l\u2019int\u00e9gration avec les frameworks support\u00e9s.</p>"},{"location":"contributing/#style-de-code","title":"Style de code","text":"<p>Outils utilis\u00e9s :</p> <ul> <li><code>black</code> \u2014 formatage automatique</li> <li><code>flake8</code> \u2014 linting</li> <li><code>isort</code> \u2014 tri des imports</li> <li><code>pre-commit</code> \u2014 hooks avant commit</li> </ul> <p>Installer les hooks :</p> <pre><code>pre-commit install\n</code></pre> <p>Lancer manuellement :</p> <pre><code>pre-commit run --all-files\n</code></pre>"},{"location":"contributing/#git-pull-requests","title":"Git &amp; Pull Requests","text":"<ol> <li>Forkez le d\u00e9p\u00f4t</li> <li>Cr\u00e9ez une branche : <code>feature/ma-fonction</code> ou <code>fix/mon-correctif</code></li> <li>Faites des commits clairs et isol\u00e9s</li> <li>Ouvrez une pull request avec une description :</li> <li>Ce qui a \u00e9t\u00e9 chang\u00e9 ou ajout\u00e9</li> <li>Quels frameworks sont affect\u00e9s</li> <li>Comment cela a \u00e9t\u00e9 test\u00e9</li> </ol>"},{"location":"contributing/#documentation","title":"Documentation","text":"<p>Si vous modifiez l\u2019API publique ou le comportement, pensez \u00e0 mettre \u00e0 jour la documentation :</p> <ul> <li>Dossier <code>docs/en/</code> (principal)</li> <li>Optionnellement : traductions dans <code>docs/fr/</code>, <code>docs/de/</code>, etc.</li> </ul>"},{"location":"contributing/#feedback-questions","title":"Feedback &amp; questions","text":"<p>Un doute ? Ouvrez une issue ou discutez dans le d\u00e9p\u00f4t \u2014 nous serons ravis de vous aider !</p>"},{"location":"faq/","title":"FAQ (Foire Aux Questions)","text":"<p>Voici les r\u00e9ponses aux questions fr\u00e9quentes concernant FastOpenAPI. Si vous avez d'autres questions, n'h\u00e9sitez pas \u00e0 ouvrir une issue sur GitHub ou \u00e0 nous contacter.</p>"},{"location":"faq/#q-quest-ce-que-fastopenapi-et-en-quoi-est-ce-different-de-fastapi","title":"Q : Qu'est-ce que FastOpenAPI et en quoi est-ce diff\u00e9rent de FastAPI ?","text":"<p>R : FastOpenAPI n'est pas un framework web, mais une biblioth\u00e8que qui ajoute la documentation OpenAPI/Swagger et la validation des requ\u00eates/r\u00e9ponses aux frameworks existants comme Flask, AIOHTTP, etc. FastAPI, quant \u00e0 lui, est un framework complet qui int\u00e8gre tout cela nativement. En r\u00e9sum\u00e9 : utilisez FastAPI pour un nouveau projet. Utilisez FastOpenAPI si vous avez d\u00e9j\u00e0 un projet avec un autre framework.</p>"},{"location":"faq/#q-quels-frameworks-sont-pris-en-charge","title":"Q : Quels frameworks sont pris en charge ?","text":"<p>R : Actuellement, FastOpenAPI prend en charge : - AIOHTTP - Falcon - Flask - Quart - Sanic - Starlette - Tornado - Django</p> <p>FastOpenAPI est modulaire et peut \u00eatre \u00e9tendu facilement. Vous pouvez \u00e9galement cr\u00e9er votre propre <code>Router</code> (voir la section \"Utilisation avanc\u00e9e\").</p>"},{"location":"faq/#q-quelles-versions-de-python-et-pydantic-sont-requises","title":"Q : Quelles versions de Python et Pydantic sont requises ?","text":"<p>R : Python 3.10 ou sup\u00e9rieur et Pydantic v2. FastOpenAPI utilise le typage moderne de Python et la g\u00e9n\u00e9ration de sch\u00e9ma JSON de Pydantic v2.</p>"},{"location":"faq/#q-comment-documenter-lauthentification-jwt-cles-api-etc","title":"Q : Comment documenter l'authentification (JWT, cl\u00e9s API, etc.) ?","text":"<p>R : FastOpenAPI ne g\u00e8re pas directement l'authentification. Vous pouvez ajouter manuellement des <code>securitySchemes</code> dans le sch\u00e9ma OpenAPI (voir \"Utilisation avanc\u00e9e\"). Par exemple, vous pouvez d\u00e9finir un param\u00e8tre <code>token: str</code> et g\u00e9rer la validation via un middleware ou un d\u00e9corateur externe.</p>"},{"location":"faq/#q-les-pages-docs-ou-redoc-ne-saffichent-pas","title":"Q : Les pages /docs ou /redoc ne s'affichent pas ?","text":"<p>R : V\u00e9rifiez que vous avez bien pass\u00e9 l\u2019instance <code>app</code> lors de l\u2019initialisation du routeur : <code>router = FrameworkRouter(app=app)</code> Sinon, les routes de documentation ne seront pas ajout\u00e9es. Assurez-vous aussi que le serveur d\u00e9marre correctement et qu\u2019il n\u2019y a pas de pr\u00e9fixe d\u2019URL bloquant l\u2019acc\u00e8s.</p>"},{"location":"faq/#q-peut-on-utiliser-fastopenapi-avec-dautres-bibliotheques-comme-flask-restx","title":"Q : Peut-on utiliser FastOpenAPI avec d'autres biblioth\u00e8ques comme Flask-RESTx ?","text":"<p>R : Ce n'est pas recommand\u00e9. L'utilisation simultan\u00e9e de plusieurs outils g\u00e9n\u00e9rant des sch\u00e9mas OpenAPI peut causer des conflits. FastOpenAPI est pr\u00e9vu pour fonctionner seul.</p>"},{"location":"faq/#q-y-a-t-il-une-gestion-de-linjection-de-dependances-ou-des-taches-en-arriere-plan","title":"Q : Y a-t-il une gestion de l'injection de d\u00e9pendances ou des t\u00e2ches en arri\u00e8re-plan ?","text":"<p>R : Pas directement. FastOpenAPI se concentre sur la documentation et la validation. Ces fonctionnalit\u00e9s doivent \u00eatre prises en charge par le framework utilis\u00e9.</p>"},{"location":"faq/#q-est-ce-pret-pour-un-usage-en-production","title":"Q : Est-ce pr\u00eat pour un usage en production ?","text":"<p>R : FastOpenAPI est encore en d\u00e9veloppement actif (version pr\u00e9-1.0), mais suffisamment stable pour de nombreux cas. Il est conseill\u00e9 de fixer la version dans <code>requirements.txt</code> et de tester avant tout d\u00e9ploiement.</p>"},{"location":"faq/#q-comment-contribuer-ou-signaler-un-bug","title":"Q : Comment contribuer ou signaler un bug ?","text":"<p>R : Avec plaisir ! Consultez la section Contribuer. Vous pouvez ouvrir une issue ou un pull request sur GitHub.</p>"},{"location":"faq/#q-existe-t-il-des-projets-dexemple-utilisant-fastopenapi","title":"Q : Existe-t-il des projets d'exemple utilisant FastOpenAPI ?","text":"<p>R : Oui, vous trouverez des exemples pour chaque framework dans le dossier <code>examples/</code> du d\u00e9p\u00f4t. Si vous utilisez FastOpenAPI en production, faites-le nous savoir !</p>"},{"location":"faq/#q-quelle-version-dopenapi-est-generee","title":"Q : Quelle version d'OpenAPI est g\u00e9n\u00e9r\u00e9e ?","text":"<p>R : FastOpenAPI g\u00e9n\u00e8re un sch\u00e9ma OpenAPI 3.1.0, car Pydantic v2 produit un sch\u00e9ma JSON compatible avec cette version.</p> <p>Vous avez d'autres questions ? Consultez les sections Utilisation, Avanc\u00e9 ou ouvrez une issue sur GitHub. Vos retours sont pr\u00e9cieux pour am\u00e9liorer le projet.</p>"},{"location":"advanced/advanced_usage/","title":"Utilisation avanc\u00e9e","text":"<p>Dans cette section, nous abordons des sujets avanc\u00e9s comme l'architecture de FastOpenAPI, son extension \u00e0 de nouveaux frameworks et la personnalisation du comportement ou de la documentation g\u00e9n\u00e9r\u00e9e. Elle s\u2019adresse aux d\u00e9veloppeurs qui souhaitent comprendre les rouages internes ou int\u00e9grer FastOpenAPI de mani\u00e8re plus pouss\u00e9e.</p>"},{"location":"advanced/advanced_usage/#vue-densemble-de-larchitecture","title":"Vue d\u2019ensemble de l\u2019architecture","text":"<p>La conception de FastOpenAPI est inspir\u00e9e de FastAPI, mais ind\u00e9pendante de tout framework. Ses composants principaux sont :</p> <ul> <li>BaseRouter : Classe de base centrale g\u00e9rant le routage, la g\u00e9n\u00e9ration de sch\u00e9mas OpenAPI et la validation des requ\u00eates/r\u00e9ponses.</li> <li>Routeurs sp\u00e9cifiques \u00e0 chaque framework : Sous-classes de <code>BaseRouter</code> (par exemple, <code>FlaskRouter</code>, <code>StarletteRouter</code>, etc.) qui assurent l\u2019int\u00e9gration avec les frameworks cibl\u00e9s.</li> <li>Mod\u00e8les Pydantic : Pour d\u00e9finir, valider et documenter les donn\u00e9es d\u2019entr\u00e9e/sortie.</li> <li>G\u00e9n\u00e9ration OpenAPI : FastOpenAPI construit un sch\u00e9ma OpenAPI 3.1 bas\u00e9 sur les routes et les m\u00e9tadonn\u00e9es d\u00e9finies.</li> <li>Documentation automatique : Rendu interactif via Swagger UI (<code>/docs</code>) et ReDoc (<code>/redoc</code>), et export JSON (<code>/openapi.json</code>).</li> </ul>"},{"location":"advanced/advanced_usage/#cycle-de-traitement-dune-requete","title":"Cycle de traitement d\u2019une requ\u00eate","text":"<ol> <li>Une requ\u00eate HTTP est re\u00e7ue par le framework.</li> <li>FastOpenAPI intercepte la route via un d\u00e9corateur <code>@router.get</code>, <code>@router.post</code>, etc.</li> <li>Extraction des param\u00e8tres (path, query, body), validation via Pydantic.</li> <li>En cas d\u2019\u00e9chec de validation, une r\u00e9ponse structur\u00e9e avec code 400 ou 422 est renvoy\u00e9e.</li> <li>Si tout est valide, la fonction est appel\u00e9e avec des arguments typ\u00e9s.</li> <li>La r\u00e9ponse est \u00e9galement valid\u00e9e via <code>response_model</code>, puis encod\u00e9e en JSON.</li> <li>Les exceptions types <code>BadRequestError</code>, <code>ResourceNotFoundError</code> sont converties automatiquement.</li> </ol>"},{"location":"advanced/advanced_usage/#etendre-a-dautres-frameworks","title":"\u00c9tendre \u00e0 d'autres frameworks","text":"<p>FastOpenAPI est con\u00e7u pour \u00eatre facilement extensible.</p>"},{"location":"advanced/advanced_usage/#etapes","title":"\u00c9tapes :","text":"<ul> <li>Cr\u00e9ez une nouvelle classe h\u00e9ritant de <code>BaseRouter</code></li> <li>Impl\u00e9mentez :</li> <li><code>add_route()</code></li> <li>(Optionnel) <code>include_router()</code></li> <li>L\u2019ajout de <code>/docs</code>, <code>/redoc</code>, <code>/openapi.json</code> si n\u00e9cessaire</li> </ul>"},{"location":"advanced/advanced_usage/#exemple","title":"Exemple :","text":"<pre><code>from fastopenapi.base_router import BaseRouter\n\nclass MyCustomRouter(BaseRouter):\n    def add_route(self, path, method, handler):\n        # Logique propre au framework\n        pass\n</code></pre> <p>Inspirez-vous de <code>starlette.py</code>, <code>flask.py</code>, etc. pour voir des impl\u00e9mentations concr\u00e8tes.</p> <p>FastOpenAPI vise \u00e0 rester minimaliste, extensible, et compatible avec les outils modernes de typage et de documentation Python.</p>"},{"location":"advanced/api_reference/","title":"R\u00e9f\u00e9rence API","text":"<p>Cette section fournit une r\u00e9f\u00e9rence d\u00e9taill\u00e9e des classes et modules de FastOpenAPI, incluant les interfaces, m\u00e9thodes et exemples d\u2019utilisation.</p>"},{"location":"advanced/api_reference/#structure-des-fichiers","title":"Structure des fichiers","text":"<p>FastOpenAPI suit une architecture modulaire :</p> <pre><code>fastopenapi/\n\u251c\u2500\u2500 base_router.py\n\u2514\u2500\u2500 routers/\n    \u251c\u2500\u2500 aiohttp.py\n    \u251c\u2500\u2500 falcon.py\n    \u251c\u2500\u2500 flask.py\n    \u251c\u2500\u2500 quart.py\n    \u251c\u2500\u2500 sanic.py\n    \u251c\u2500\u2500 starlette.py\n    \u251c\u2500\u2500 tornado.py\n    \u2514\u2500\u2500 django.py\n</code></pre>"},{"location":"advanced/api_reference/#baserouter","title":"BaseRouter","text":"<p>Description : Classe de base abstraite fournissant les fonctionnalit\u00e9s communes de routage et de g\u00e9n\u00e9ration de sch\u00e9ma OpenAPI. Toutes les impl\u00e9mentations de frameworks h\u00e9ritent de cette classe.</p>"},{"location":"advanced/api_reference/#methodes-principales","title":"M\u00e9thodes principales","text":"<ul> <li><code>__init__(app)</code>: initialise avec l\u2019application du framework.</li> <li><code>get(path, **options)</code>, <code>post(...)</code>, <code>put(...)</code>, <code>patch(...)</code>, <code>delete(...)</code> : enregistrent les routes HTTP correspondantes.</li> <li><code>include_router(router, prefix=\"\")</code>: permet l\u2019inclusion de sous-routeurs avec un pr\u00e9fixe.</li> <li><code>generate_openapi_schema()</code>: g\u00e9n\u00e8re dynamiquement le sch\u00e9ma OpenAPI.</li> <li><code>get_openapi_schema()</code>: renvoie le sch\u00e9ma OpenAPI mis en cache.</li> </ul>"},{"location":"advanced/api_reference/#attributs","title":"Attributs","text":"<ul> <li><code>app</code>: instance de l\u2019application framework.</li> <li><code>routes</code>: liste interne des routes d\u00e9finies.</li> <li><code>docs_url</code>, <code>redoc_url</code>, <code>openapi_url</code>: chemins pour la documentation interactive.</li> <li><code>title</code>, <code>version</code>, <code>description</code>: m\u00e9tadonn\u00e9es du sch\u00e9ma.</li> </ul>"},{"location":"advanced/api_reference/#routeurs-specifiques-aux-frameworks","title":"Routeurs sp\u00e9cifiques aux frameworks","text":"<p>FastOpenAPI fournit un routeur d\u00e9di\u00e9 pour chaque framework pris en charge. Tous ces routeurs h\u00e9ritent de <code>BaseRouter</code> et adaptent la logique de routing \u00e0 l\u2019interface du framework.</p>"},{"location":"advanced/api_reference/#aiohttprouter","title":"AioHttpRouter","text":"<pre><code>from aiohttp import web\nfrom fastopenapi.routers import AioHttpRouter\n\napp = web.Application()\nrouter = AioHttpRouter(app=app)\n\n@router.get(\"/status\")\nasync def status():\n    return {\"status\": \"ok\"}\n</code></pre>"},{"location":"advanced/api_reference/#falconrouter","title":"FalconRouter","text":"<pre><code>import falcon.asgi\nfrom fastopenapi.routers import FalconRouter\n\napp = falcon.asgi.App()\nrouter = FalconRouter(app=app)\n\n@router.get(\"/status\")\nasync def status():\n    return {\"status\": \"ok\"}\n</code></pre>"},{"location":"advanced/api_reference/#flaskrouter","title":"FlaskRouter","text":"<pre><code>from flask import Flask\nfrom fastopenapi.routers import FlaskRouter\n\napp = Flask(__name__)\nrouter = FlaskRouter(app=app)\n\n@router.get(\"/hello\")\ndef hello(name: str):\n    return {\"message\": f\"Hello {name}\"}\n</code></pre>"},{"location":"advanced/api_reference/#quartrouter","title":"QuartRouter","text":"<pre><code>from quart import Quart\nfrom fastopenapi.routers import QuartRouter\n\napp = Quart(__name__)\nrouter = QuartRouter(app=app)\n\n@router.get(\"/ping\")\nasync def ping():\n    return {\"pong\": True}\n</code></pre>"},{"location":"advanced/api_reference/#sanicrouter","title":"SanicRouter","text":"<pre><code>from sanic import Sanic\nfrom fastopenapi.routers import SanicRouter\n\napp = Sanic(\"MySanicApp\")\nrouter = SanicRouter(app=app)\n\n@router.get(\"/info\")\nasync def info():\n    return {\"framework\": \"Sanic\", \"status\": \"running\"}\n</code></pre>"},{"location":"advanced/api_reference/#starletterouter","title":"StarletteRouter","text":"<p>Use for Starlette integration.</p> <pre><code>from starlette.applications import Starlette\nfrom fastopenapi.routers import StarletteRouter\n\napp = Starlette()\nrouter = StarletteRouter(app=app)\n\n@router.get(\"/check\")\nasync def check():\n    return {\"status\": \"healthy\"}\n</code></pre>"},{"location":"advanced/api_reference/#tornadorouter","title":"TornadoRouter","text":"<p>Use for Tornado integration.</p> <pre><code>from tornado.web import Application\nfrom fastopenapi.routers import TornadoRouter\n\napp = Application()\nrouter = TornadoRouter(app=app)\n\n@router.get(\"/status\")\ndef status():\n    return {\"running\": True}\n</code></pre>"},{"location":"advanced/api_reference/#djangorouter","title":"DjangoRouter","text":"<p>Use for Django integration.</p> <pre><code>from django.urls import path\nfrom fastopenapi.routers import DjangoRouter\n\nrouter = DjangoRouter(app=True)\n\n@router.get(\"/status\")\nasync def status():\n    return {\"status\": \"ok\"}\n\nurlpatterns = [path(\"\", router.urls)]\n</code></pre>"},{"location":"advanced/api_reference/#exemple-de-sous-routeur","title":"Exemple de sous-routeur","text":"<pre><code>api_v1 = FlaskRouter()\n\n@api_v1.get(\"/users\")\ndef users():\n    return [{\"name\": \"Alice\"}, {\"name\": \"Bob\"}]\n\nmain_router = FlaskRouter(app=app)\nmain_router.include_router(api_v1, prefix=\"/v1\")\n</code></pre>"},{"location":"advanced/api_reference/#gestion-des-erreurs","title":"Gestion des erreurs","text":""},{"location":"advanced/api_reference/#erreurs-personnalisees-fastopenapi","title":"Erreurs personnalis\u00e9es FastOpenAPI","text":"<pre><code>from fastopenapi.error_handler import BadRequestError, ResourceNotFoundError\n\n@router.get(\"/validate\")\ndef validate_input(param: int):\n    if param &lt; 0:\n        raise BadRequestError(\"Le param\u00e8tre doit \u00eatre positif\")\n\n@router.get(\"/items/{item_id}\")\ndef get_item(item_id: int):\n    item = db.get(item_id)\n    if item is None:\n        raise ResourceNotFoundError(f\"\u00c9l\u00e9ment {item_id} introuvable\")\n</code></pre>"},{"location":"advanced/api_reference/#compatibilite-avec-les-erreurs-natives-du-framework","title":"Compatibilit\u00e9 avec les erreurs natives du framework","text":""},{"location":"advanced/api_reference/#aiohttp","title":"AioHTTP","text":"<pre><code>from aiohttp import web\n\n@router.get(\"/notfound\")\ndef aiohttp_notfound():\n    raise web.HTTPNotFound(reason=\"Not Found\")\n</code></pre>"},{"location":"advanced/api_reference/#falcon","title":"Falcon","text":"<pre><code>import falcon\n\n@router.get(\"/notfound\")\nasync def falcon_notfound():\n    raise falcon.HTTPNotFound(title=\"Not Found\", description=\"Falcon error\")\n</code></pre>"},{"location":"advanced/api_reference/#flask","title":"Flask","text":"<pre><code>from flask import abort\n\n@router.get(\"/notfound\")\ndef flask_notfound():\n    abort(404, description=\"Flask error\")\n</code></pre>"},{"location":"advanced/api_reference/#quart","title":"Quart","text":"<pre><code>from quart import abort\n\n@router.get(\"/notfound\")\nasync def quart_notfound():\n    abort(404, description=\"Quart error\")\n</code></pre>"},{"location":"advanced/api_reference/#sanic","title":"Sanic","text":"<pre><code>from sanic import NotFound\n\n@router.get(\"/notfound\")\nasync def sanic_notfound():\n    raise NotFound()\n</code></pre>"},{"location":"advanced/api_reference/#starlette","title":"Starlette","text":"<pre><code>from starlette.exceptions import HTTPException\n\n@router.get(\"/notfound\")\nasync def starlette_notfound():\n    raise HTTPException(status_code=404, detail=\"Not Found\")\n</code></pre>"},{"location":"advanced/api_reference/#tornado","title":"Tornado","text":"<pre><code>from tornado.web import HTTPError\n\n@router.get(\"/notfound\")\nasync def tornado_notfound():\n    raise HTTPError(status_code=404, reason=\"Not Found\")\n</code></pre>"},{"location":"frameworks/aiohttp/","title":"Int\u00e9gration AIOHTTP","text":"<p>Ce guide explique comment utiliser FastOpenAPI avec AIOHTTP, un framework HTTP asynchrone pour Python.</p> <p>Les applications AIOHTTP sont construites avec <code>aiohttp.web.Application</code> et ex\u00e9cut\u00e9es avec <code>aiohttp.web.run_app</code>. FastOpenAPI fournit le routeur <code>AioHttpRouter</code> pour s\u2019y int\u00e9grer.</p>"},{"location":"frameworks/aiohttp/#installation","title":"Installation","text":"<p>Assurez-vous que FastOpenAPI est install\u00e9 :</p> <pre><code>pip install fastopenapi\n</code></pre> <p>ou :</p> <pre><code>pip install fastopenapi[aiohttp]\n</code></pre>"},{"location":"frameworks/aiohttp/#hello-world","title":"Hello World","text":"<pre><code>from aiohttp import web\nfrom pydantic import BaseModel\nfrom fastopenapi.routers import AioHttpRouter\n\napp = web.Application()\nrouter = AioHttpRouter(app=app)\n\nclass HelloResponse(BaseModel):\n    message: str\n\n@router.get(\"/hello\", tags=[\"Hello\"], response_model=HelloResponse)\nasync def hello(name: str):\n    \"\"\"Dire bonjour avec AIOHTTP\"\"\"\n    return HelloResponse(message=f\"Bonjour, {name} ! C'est aiohttp !\")\n\nif __name__ == \"__main__\":\n    web.run_app(app, host=\"127.0.0.1\", port=8000)\n</code></pre>"},{"location":"frameworks/aiohttp/#exemple-de-projet","title":"Exemple de projet","text":"<p>Un exemple complet est disponible dans le r\u00e9pertoire <code>examples/aiohttp/</code> du d\u00e9p\u00f4t.</p>"},{"location":"frameworks/django/","title":"Int\u00e9gration avec Django","text":"<p>Ce guide pr\u00e9sente l\u2019utilisation de FastOpenAPI avec Django, un framework web haute performance.</p> <p>Le <code>DjangoRouter</code> de FastOpenAPI prend en charge Falcon, notamment via son interface urls.</p>"},{"location":"frameworks/django/#installation","title":"Installation","text":"<p>Installez FastOpenAPI:</p> <pre><code>pip install fastopenapi\n</code></pre> <p>ou :</p> <pre><code>pip install fastopenapi[django]\n</code></pre>"},{"location":"frameworks/django/#hello-world","title":"Hello World","text":"<pre><code>from django.conf import settings\nfrom django.core.management import call_command\nfrom django.core.wsgi import get_wsgi_application\nfrom django.urls import path\nfrom pydantic import BaseModel\n\nfrom fastopenapi.routers import DjangoRouter\n\nsettings.configure(DEBUG=True, SECRET_KEY=\"__CHANGEME__\", ROOT_URLCONF=__name__)\napplication = get_wsgi_application()\n\nrouter = DjangoRouter(app=True)\n\n\nclass HelloResponse(BaseModel):\n    message: str\n\n\n@router.get(\"/hello\", tags=[\"Hello\"], status_code=200, response_model=HelloResponse)\ndef hello(name: str):\n    \"\"\"Say hello from django\"\"\"\n    return HelloResponse(message=f\"Hello, {name}! It's Django!\")\n\n\nurlpatterns = [path(\"\", router.urls)]\n\nif __name__ == \"__main__\":\n    call_command(\"runserver\")\n\n</code></pre>"},{"location":"frameworks/django/#exemple-de-projet","title":"Exemple de projet","text":"<p>Un exemple complet est disponible dans le dossier <code>examples/django/</code> du d\u00e9p\u00f4t.</p>"},{"location":"frameworks/falcon/","title":"Int\u00e9gration avec Falcon","text":"<p>Ce guide pr\u00e9sente l\u2019utilisation de FastOpenAPI avec Falcon, un framework web haute performance.</p> <p>Le <code>FalconRouter</code> de FastOpenAPI prend en charge Falcon, notamment via son interface ASGI pour les op\u00e9rations asynchrones.</p>"},{"location":"frameworks/falcon/#installation","title":"Installation","text":"<p>Installez FastOpenAPI :</p> <pre><code>pip install fastopenapi\n</code></pre> <p>ou :</p> <pre><code>pip install fastopenapi[falcon]\n</code></pre>"},{"location":"frameworks/falcon/#hello-world","title":"Hello World","text":"<pre><code>import falcon.asgi\nimport uvicorn\nfrom pydantic import BaseModel\nfrom fastopenapi.routers import FalconRouter\n\napp = falcon.asgi.App()\nrouter = FalconRouter(app=app)\n\nclass HelloResponse(BaseModel):\n    message: str\n\n@router.get(\"/hello\", tags=[\"Hello\"], response_model=HelloResponse)\nasync def hello(name: str):\n    \"\"\"Dire bonjour avec Falcon\"\"\"\n    return HelloResponse(message=f\"Bonjour, {name} ! C\u2019est Falcon !\")\n\nif __name__ == \"__main__\":\n    uvicorn.run(app, host=\"127.0.0.1\", port=8000)\n</code></pre>"},{"location":"frameworks/falcon/#exemple-de-projet","title":"Exemple de projet","text":"<p>Un exemple complet est disponible dans le dossier <code>examples/falcon/</code> du d\u00e9p\u00f4t.</p>"},{"location":"frameworks/flask/","title":"Int\u00e9gration avec Flask","text":"<p>Ce guide explique comment int\u00e9grer FastOpenAPI avec Flask, l\u2019un des frameworks web Python les plus populaires.</p> <p>La classe <code>FlaskRouter</code> permet de lier FastOpenAPI au syst\u00e8me de routage de Flask.</p>"},{"location":"frameworks/flask/#installation","title":"Installation","text":"<p>Installez FastOpenAPI :</p> <pre><code>pip install fastopenapi\n</code></pre> <p>ou :</p> <pre><code>pip install fastopenapi[flask]\n</code></pre>"},{"location":"frameworks/flask/#hello-world","title":"Hello World","text":"<pre><code>from flask import Flask\nfrom pydantic import BaseModel\nfrom fastopenapi.routers import FlaskRouter\n\napp = Flask(__name__)\nrouter = FlaskRouter(app=app)\n\nclass HelloResponse(BaseModel):\n    message: str\n\n@router.get(\"/hello\", tags=[\"Hello\"], response_model=HelloResponse)\ndef hello(name: str):\n    \"\"\"Dire bonjour avec Flask\"\"\"\n    return HelloResponse(message=f\"Bonjour, {name} ! C\u2019est Flask !\")\n\nif __name__ == \"__main__\":\n    app.run(port=8000)\n</code></pre>"},{"location":"frameworks/flask/#exemple-de-projet","title":"Exemple de projet","text":"<p>Un exemple complet est disponible dans le dossier <code>examples/flask/</code> du d\u00e9p\u00f4t.</p>"},{"location":"frameworks/quart/","title":"Int\u00e9gration avec Quart","text":"<p>Quart est un framework web asynchrone avec une API tr\u00e8s proche de Flask (c\u2019est un remplacement direct avec support async).</p> <p>FastOpenAPI fournit <code>QuartRouter</code> pour une int\u00e9gration fluide avec Quart.</p>"},{"location":"frameworks/quart/#installation","title":"Installation","text":"<p>Installez FastOpenAPI :</p> <pre><code>pip install fastopenapi\n</code></pre> <p>ou :</p> <pre><code>pip install fastopenapi[quart]\n</code></pre>"},{"location":"frameworks/quart/#hello-world","title":"Hello World","text":"<pre><code>from quart import Quart\nfrom pydantic import BaseModel\nfrom fastopenapi.routers import QuartRouter\n\napp = Quart(__name__)\nrouter = QuartRouter(app=app)\n\nclass HelloResponse(BaseModel):\n    message: str\n\n@router.get(\"/hello\", tags=[\"Hello\"], response_model=HelloResponse)\nasync def hello(name: str):\n    \"\"\"Dire bonjour avec Quart\"\"\"\n    return HelloResponse(message=f\"Bonjour, {name} ! C\u2019est Quart !\")\n\nif __name__ == \"__main__\":\n    app.run(port=8000)\n</code></pre>"},{"location":"frameworks/quart/#exemple-de-projet","title":"Exemple de projet","text":"<p>Consultez le dossier <code>examples/quart/</code> pour un exemple complet.</p>"},{"location":"frameworks/sanic/","title":"Int\u00e9gration avec Sanic","text":"<p>Sanic est un framework web asynchrone connu pour sa rapidit\u00e9.</p> <p>FastOpenAPI s\u2019int\u00e8gre \u00e0 Sanic via le <code>SanicRouter</code>.</p>"},{"location":"frameworks/sanic/#installation","title":"Installation","text":"<p>Installez FastOpenAPI :</p> <pre><code>pip install fastopenapi\n</code></pre> <p>ou :</p> <pre><code>pip install fastopenapi[sanic]\n</code></pre>"},{"location":"frameworks/sanic/#hello-world","title":"Hello World","text":"<pre><code>from sanic import Sanic\nfrom pydantic import BaseModel\nfrom fastopenapi.routers import SanicRouter\n\napp = Sanic(\"MySanicApp\")\nrouter = SanicRouter(app=app)\n\nclass HelloResponse(BaseModel):\n    message: str\n\n@router.get(\"/hello\", tags=[\"Hello\"], response_model=HelloResponse)\nasync def hello(name: str):\n    \"\"\"Dire bonjour avec Sanic\"\"\"\n    return HelloResponse(message=f\"Bonjour, {name} ! C\u2019est Sanic !\")\n\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=8000)\n</code></pre>"},{"location":"frameworks/sanic/#exemple-de-projet","title":"Exemple de projet","text":"<p>Consultez le dossier <code>examples/sanic/</code> pour un exemple complet.</p>"},{"location":"frameworks/starlette/","title":"Int\u00e9gration avec Starlette","text":"<p>Starlette est un framework ASGI l\u00e9ger sur lequel repose FastAPI lui-m\u00eame.</p> <p>Le <code>StarletteRouter</code> de FastOpenAPI permet une int\u00e9gration directe avec les applications Starlette.</p>"},{"location":"frameworks/starlette/#installation","title":"Installation","text":"<p>Installez FastOpenAPI :</p> <pre><code>pip install fastopenapi\n</code></pre> <p>ou :</p> <pre><code>pip install fastopenapi[starlette]\n</code></pre>"},{"location":"frameworks/starlette/#hello-world","title":"Hello World","text":"<pre><code>import uvicorn\nfrom pydantic import BaseModel\nfrom starlette.applications import Starlette\nfrom fastopenapi.routers import StarletteRouter\n\napp = Starlette()\nrouter = StarletteRouter(app=app)\n\nclass HelloResponse(BaseModel):\n    message: str\n\n@router.get(\"/hello\", tags=[\"Hello\"], response_model=HelloResponse)\nasync def hello(name: str):\n    \"\"\"Dire bonjour avec Starlette\"\"\"\n    return HelloResponse(message=f\"Bonjour, {name} ! C\u2019est Starlette !\")\n\nif __name__ == \"__main__\":\n    uvicorn.run(app, host=\"127.0.0.1\", port=8000)\n</code></pre>"},{"location":"frameworks/starlette/#exemple-de-projet","title":"Exemple de projet","text":"<p>Consultez le dossier <code>examples/starlette/</code> pour un exemple complet.</p>"},{"location":"frameworks/tornado/","title":"Int\u00e9gration avec Tornado","text":"<p>Tornado est un framework web Python mature et une biblioth\u00e8que r\u00e9seau asynchrone.</p> <p>FastOpenAPI prend en charge Tornado via <code>TornadoRouter</code>, ce qui permet d\u2019ajouter de la documentation OpenAPI aux applications Tornado.</p>"},{"location":"frameworks/tornado/#installation","title":"Installation","text":"<p>Installez FastOpenAPI :</p> <pre><code>pip install fastopenapi\n</code></pre> <p>ou</p> <pre><code>pip install fastopenapi[tornado]\n</code></pre>"},{"location":"frameworks/tornado/#hello-world","title":"Hello World","text":"<pre><code>import asyncio\nfrom pydantic import BaseModel\nfrom tornado.web import Application\nfrom fastopenapi.routers import TornadoRouter\n\napp = Application()\nrouter = TornadoRouter(app=app)\n\nclass HelloResponse(BaseModel):\n    message: str\n\n@router.get(\"/hello\", tags=[\"Hello\"], response_model=HelloResponse)\ndef hello(name: str):\n    \"\"\"Dire bonjour avec Tornado\"\"\"\n    return HelloResponse(message=f\"Bonjour, {name} ! C\u2019est Tornado !\")\n\nasync def main():\n    app.listen(8000)\n    await asyncio.Event().wait()\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"frameworks/tornado/#exemple-de-projet","title":"Exemple de projet","text":"<p>Un exemple complet est disponible dans le dossier <code>examples/tornado/</code> du d\u00e9p\u00f4t.</p>"},{"location":"getting_started/installation/","title":"Installation","text":"<p>FastOpenAPI est disponible sur PyPI et prend en charge Python 3.10 ou sup\u00e9rieur. Vous pouvez installer uniquement la biblioth\u00e8que principale ou inclure des d\u00e9pendances optionnelles pour certains frameworks web.</p>"},{"location":"getting_started/installation/#prerequis","title":"Pr\u00e9requis","text":"<ul> <li>Python 3.10 ou plus r\u00e9cent \u2013 requis en raison de l'utilisation des fonctionnalit\u00e9s modernes de typage et de Pydantic v2.</li> <li>(Optionnel) Un framework web existant (comme Flask, Starlette, etc.) si vous pr\u00e9voyez une int\u00e9gration. Si vous ne l'avez pas encore install\u00e9, vous pouvez utiliser les extras de <code>pip</code> pour l\u2019installer automatiquement avec FastOpenAPI.</li> </ul>"},{"location":"getting_started/installation/#utilisation-de-pip","title":"Utilisation de pip","text":""},{"location":"getting_started/installation/#installer-uniquement-fastopenapi","title":"Installer uniquement FastOpenAPI","text":"<p>Installation standard :</p> <pre><code>pip install fastopenapi\n</code></pre>"},{"location":"getting_started/installation/#installer-fastopenapi-avec-un-framework-specifique","title":"Installer FastOpenAPI avec un framework sp\u00e9cifique","text":"<p>Utile si vous commencez un nouveau projet sans framework install\u00e9 :</p> <pre><code>pip install fastopenapi[aiohttp]\n</code></pre> <pre><code>pip install fastopenapi[falcon]\n</code></pre> <pre><code>pip install fastopenapi[flask]\n</code></pre> <pre><code>pip install fastopenapi[quart]\n</code></pre> <pre><code>pip install fastopenapi[sanic]\n</code></pre> <pre><code>pip install fastopenapi[starlette]\n</code></pre> <pre><code>pip install fastopenapi[tornado]\n</code></pre> <pre><code>pip install fastopenapi[django]\n</code></pre>"},{"location":"getting_started/quickstart/","title":"D\u00e9marrage rapide","text":"<p>Ce guide vous montre comment ajouter FastOpenAPI \u00e0 une application simple et afficher la documentation API g\u00e9n\u00e9r\u00e9e automatiquement.</p>"},{"location":"getting_started/quickstart/#etape-0-installer-la-bibliotheque","title":"\u00c9tape 0. Installer la biblioth\u00e8que","text":"<p>Suivez les instructions de la page Installation</p>"},{"location":"getting_started/quickstart/#etape-1-creer-une-application","title":"\u00c9tape 1. Cr\u00e9er une application","text":"<ul> <li>Cr\u00e9ez un fichier <code>main.py</code></li> <li>Copiez le code depuis un exemple</li> <li>Certains exemples n\u00e9cessitent <code>uvicorn</code> (<code>pip install uvicorn</code>)</li> </ul>"},{"location":"getting_started/quickstart/#exemples","title":"Exemples","text":""},{"location":"getting_started/quickstart/#aiohttp","title":"AioHTTP","text":"Click to expand the AioHttp Example <pre><code>from aiohttp import web\nfrom pydantic import BaseModel\n\nfrom fastopenapi.routers import AioHttpRouter\n\napp = web.Application()\nrouter = AioHttpRouter(app=app)\n\n\nclass HelloResponse(BaseModel):\n    message: str\n\n\n@router.get(\"/hello\", tags=[\"Hello\"], status_code=200, response_model=HelloResponse)\nasync def hello(name: str):\n    \"\"\"Say hello from aiohttp\"\"\"\n    return HelloResponse(message=f\"Hello, {name}! It's aiohttp!\")\n\n\nif __name__ == \"__main__\":\n    web.run_app(app, host=\"127.0.0.1\", port=8000)\n</code></pre>"},{"location":"getting_started/quickstart/#falcon","title":"Falcon","text":"Click to expand the Falcon Example <pre><code>import falcon.asgi\nimport uvicorn\nfrom pydantic import BaseModel\n\nfrom fastopenapi.routers import FalconRouter\n\napp = falcon.asgi.App()\nrouter = FalconRouter(app=app)\n\n\nclass HelloResponse(BaseModel):\n    message: str\n\n\n@router.get(\"/hello\", tags=[\"Hello\"], status_code=200, response_model=HelloResponse)\nasync def hello(name: str):\n    \"\"\"Say hello from Falcon\"\"\"\n    return HelloResponse(message=f\"Hello, {name}! It's Falcon!\")\n\n\nif __name__ == \"__main__\":\n    uvicorn.run(app, host=\"127.0.0.1\", port=8000)\n\n</code></pre>"},{"location":"getting_started/quickstart/#flask","title":"Flask","text":"Click to expand the Flask Example <pre><code>from flask import Flask\nfrom pydantic import BaseModel\n\nfrom fastopenapi.routers import FlaskRouter\n\napp = Flask(__name__)\nrouter = FlaskRouter(app=app)\n\n\nclass HelloResponse(BaseModel):\n    message: str\n\n\n@router.get(\"/hello\", tags=[\"Hello\"], status_code=200, response_model=HelloResponse)\ndef hello(name: str):\n    \"\"\"Say hello from Flask\"\"\"\n    return HelloResponse(message=f\"Hello, {name}! It's Flask!\")\n\n\nif __name__ == \"__main__\":\n    app.run(port=8000)\n\n</code></pre>"},{"location":"getting_started/quickstart/#quart","title":"Quart","text":"Click to expand the Quart Example <pre><code>from pydantic import BaseModel\nfrom quart import Quart\n\nfrom fastopenapi.routers import QuartRouter\n\napp = Quart(__name__)\nrouter = QuartRouter(app=app)\n\n\nclass HelloResponse(BaseModel):\n    message: str\n\n\n@router.get(\"/hello\", tags=[\"Hello\"], status_code=200, response_model=HelloResponse)\nasync def hello(name: str):\n    \"\"\"Say hello from Quart\"\"\"\n    return HelloResponse(message=f\"Hello, {name}! It's Quart!\")\n\n\nif __name__ == \"__main__\":\n    app.run(port=8000)\n\n</code></pre>"},{"location":"getting_started/quickstart/#sanic","title":"Sanic","text":"Click to expand the Sanic Example <pre><code>from pydantic import BaseModel\nfrom sanic import Sanic\n\nfrom fastopenapi.routers import SanicRouter\n\napp = Sanic(\"MySanicApp\")\nrouter = SanicRouter(app=app)\n\n\nclass HelloResponse(BaseModel):\n    message: str\n\n\n@router.get(\"/hello\", tags=[\"Hello\"], status_code=200, response_model=HelloResponse)\nasync def hello(name: str):\n    \"\"\"Say hello from Sanic\"\"\"\n    return HelloResponse(message=f\"Hello, {name}! It's Sanic!\")\n\n\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=8000)\n\n</code></pre>"},{"location":"getting_started/quickstart/#starlette","title":"Starlette","text":"Click to expand the Starlette Example <pre><code>import uvicorn\nfrom pydantic import BaseModel\nfrom starlette.applications import Starlette\n\nfrom fastopenapi.routers import StarletteRouter\n\napp = Starlette()\nrouter = StarletteRouter(app=app)\n\n\nclass HelloResponse(BaseModel):\n    message: str\n\n\n@router.get(\"/hello\", tags=[\"Hello\"], status_code=200, response_model=HelloResponse)\nasync def hello(name: str):\n    \"\"\"Say hello from Starlette\"\"\"\n    return HelloResponse(message=f\"Hello, {name}! It's Starlette!\")\n\nif __name__ == \"__main__\":\n    uvicorn.run(app, host=\"127.0.0.1\", port=8000)\n\n</code></pre>"},{"location":"getting_started/quickstart/#tornado","title":"Tornado","text":"Click to expand the Tornado Example <pre><code>import asyncio\nfrom pydantic import BaseModel\nfrom tornado.web import Application\nfrom fastopenapi.routers.tornado import TornadoRouter\n\napp = Application()\nrouter = TornadoRouter(app=app)\n\nclass HelloResponse(BaseModel):\n    message: str\n\n@router.get(\"/hello\", tags=[\"Hello\"], status_code=200, response_model=HelloResponse)\ndef hello(name: str):\n    \"\"\"Say hello from Tornado\"\"\"\n    return HelloResponse(message=f\"Hello, {name}! It's Tornado!\")\n\nasync def main():\n    app.listen(8000)\n    await asyncio.Event().wait()\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n\n</code></pre>"},{"location":"getting_started/quickstart/#django","title":"Django","text":"Click to expand the Django Example <pre><code>from django.conf import settings\nfrom django.core.management import call_command\nfrom django.core.wsgi import get_wsgi_application\nfrom django.urls import path\nfrom pydantic import BaseModel\n\nfrom fastopenapi.routers import DjangoRouter\n\nsettings.configure(DEBUG=True, SECRET_KEY=\"__CHANGEME__\", ROOT_URLCONF=__name__)\napplication = get_wsgi_application()\n\nrouter = DjangoRouter(app=True)\n\n\nclass HelloResponse(BaseModel):\n    message: str\n\n\n@router.get(\"/hello\", tags=[\"Hello\"], status_code=200, response_model=HelloResponse)\ndef hello(name: str):\n    \"\"\"Say hello from django\"\"\"\n    return HelloResponse(message=f\"Hello, {name}! It's Django!\")\n\n\nurlpatterns = [path(\"\", router.urls)]\n\nif __name__ == \"__main__\":\n    call_command(\"runserver\")\n</code></pre>"},{"location":"getting_started/quickstart/#etape-2-lancer-le-serveur","title":"\u00c9tape 2. Lancer le serveur","text":"<pre><code>python main.py\n</code></pre> <p>Une fois d\u00e9marr\u00e9, ouvrez votre navigateur :</p>"},{"location":"getting_started/quickstart/#swagger-ui","title":"Swagger UI","text":"<pre><code>http://127.0.0.1:8000/docs\n</code></pre>"},{"location":"getting_started/quickstart/#redoc","title":"ReDoc","text":"<pre><code>http://127.0.0.1:8000/redoc\n</code></pre>"},{"location":"getting_started/quickstart/#routes-generees-automatiquement","title":"Routes g\u00e9n\u00e9r\u00e9es automatiquement","text":"<ul> <li>Swagger UI : http://localhost:8000/docs  </li> <li>ReDoc : http://localhost:8000/redoc  </li> <li>OpenAPI JSON : http://localhost:8000/openapi.json</li> </ul>"},{"location":"getting_started/usage/","title":"Utilisation","text":"<p>Cette section explique comment utiliser FastOpenAPI pour documenter et valider les routes de votre API. Elle comprend des exemples concrets pour la gestion des entr\u00e9es/sorties, des erreurs et l'organisation modulaire du code.</p>"},{"location":"getting_started/usage/#definition-de-routes","title":"D\u00e9finition de routes","text":""},{"location":"getting_started/usage/#methodes-disponibles","title":"M\u00e9thodes disponibles","text":"<ul> <li><code>@router.get(path, response_model, tags, status_code, response_errors)</code></li> <li><code>@router.post(...)</code></li> <li><code>@router.put(...)</code></li> <li><code>@router.patch(...)</code></li> <li><code>@router.delete(...)</code></li> </ul>"},{"location":"getting_started/usage/#options-courantes","title":"Options courantes","text":"<ul> <li><code>response_model</code>: mod\u00e8le Pydantic attendu en sortie</li> <li><code>tags</code>: liste de cat\u00e9gories OpenAPI</li> <li><code>status_code</code>: code de r\u00e9ponse par d\u00e9faut</li> <li><code>response_errors</code>: dictionnaire des erreurs possibles</li> </ul>"},{"location":"getting_started/usage/#exemple-de-base","title":"Exemple de base","text":"<pre><code>from pydantic import BaseModel\nfrom typing import Optional\nfrom fastopenapi.base_router import BaseRouter\n\nclass CreateUserRequest(BaseModel):\n    name: str\n    surname: str\n    age: int\n\nclass UpdateUserRequest(BaseModel):\n    name: Optional[str]\n    surname: Optional[str]\n    age: Optional[int]\n\nclass UserResponse(BaseModel):\n    id: int\n    name: str\n    surname: str\n    age: int\n\nrouter = BaseRouter()\n\n@router.get(\"/user/{user_id}\", tags=[\"User\"], status_code=200, response_model=UserResponse)\ndef get_user(user_id: int):\n    data = {}\n    return UserResponse(**data)\n\n@router.post(\"/user\", tags=[\"User\"], status_code=201, response_model=UserResponse)\ndef create_user(user_data: CreateUserRequest):\n    data = {}\n    return UserResponse(**data)\n\n@router.patch(\"/user/{user_id}\", tags=[\"User\"], status_code=200, response_model=UserResponse)\ndef update_user(user_id: int, user_data: UpdateUserRequest):\n    data = {}\n    return UserResponse(**data)\n\n@router.delete(\"/user/{user_id}\", tags=[\"User\"], status_code=204)\ndef delete_user(user_id: int):\n    return None\n</code></pre>"},{"location":"getting_started/usage/#parametres-de-route","title":"Param\u00e8tres de route","text":"<pre><code>@router.get(\"/items/{item_id}\")\nasync def get_item(item_id: int):\n    item = database.get(item_id)\n    if item is None:\n        raise ResourceNotFoundError(f\"Item {item_id} introuvable\")\n    return item\n</code></pre>"},{"location":"getting_started/usage/#parametres-de-requete","title":"Param\u00e8tres de requ\u00eate","text":"<pre><code>@router.get(\"/search\")\nasync def search(q: str = \"\", limit: int = 10):\n    if limit &lt; 0:\n        raise BadRequestError(\"La limite doit \u00eatre positive\")\n    return {\"query\": q, \"limit\": limit}\n</code></pre>"},{"location":"getting_started/usage/#corps-de-requete-avec-pydantic","title":"Corps de requ\u00eate avec Pydantic","text":"<pre><code>from flask import abort\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    price: float\n\n@router.post(\"/items\", response_model=Item, status_code=201)\ndef create_item(item: Item):\n    try:\n        save_to_database(item)\n    except DatabaseError:\n        abort(500, description=\"Erreur interne\")\n    return item\n</code></pre>"},{"location":"getting_started/usage/#utilisation-de-sous-routeurs","title":"Utilisation de sous-routeurs","text":"<p>users.py</p> <pre><code>from fastopenapi.routers import StarletteRouter\nfrom pydantic import BaseModel\nfrom typing import List\n\nuser_router = StarletteRouter()\n\nclass User(BaseModel):\n    id: int\n    name: str\n\n@user_router.get(\"/users\", response_model=List[User])\nasync def list_users():\n    return [{\"id\": 1, \"name\": \"Alice\"}, {\"id\": 2, \"name\": \"Bob\"}]\n</code></pre> <p>main.py</p> <pre><code>from fastopenapi.routers import StarletteRouter\nfrom starlette.applications import Starlette\nfrom users import user_router\n\napp = Starlette()\nmain_router = StarletteRouter(app=app)\nmain_router.include_router(user_router, prefix=\"/v1\")\n</code></pre>"},{"location":"getting_started/usage/#gestion-des-erreurs","title":"Gestion des erreurs","text":""},{"location":"getting_started/usage/#erreurs-fastopenapi","title":"Erreurs FastOpenAPI","text":"<pre><code>from fastopenapi.error_handler import ResourceNotFoundError\n\n@router.get(\"/products/{product_id}\")\nasync def get_product(product_id: int):\n    product = db.get(product_id)\n    if product is None:\n        raise ResourceNotFoundError(f\"Produit {product_id} non trouv\u00e9\")\n    return product\n</code></pre>"},{"location":"getting_started/usage/#erreurs-specifiques-au-framework","title":"Erreurs sp\u00e9cifiques au framework","text":""},{"location":"getting_started/usage/#flask","title":"Flask","text":"<pre><code>from flask import abort\n\n@router.get(\"/orders/{order_id}\")\ndef get_order(order_id: int):\n    order = get_order_from_db(order_id)\n    if order is None:\n        abort(404, description=\"Commande non trouv\u00e9e\")\n    return order\n</code></pre>"},{"location":"getting_started/usage/#falcon","title":"Falcon","text":"<pre><code>import falcon\n\n@router.get(\"/invoices/{invoice_id}\")\nasync def get_invoice(invoice_id: int):\n    invoice = db.get(invoice_id)\n    if invoice is None:\n        raise falcon.HTTPNotFound(title=\"Non trouv\u00e9\", description=\"Facture introuvable\")\n    return invoice\n</code></pre>"},{"location":"getting_started/usage/#exemples-complets","title":"Exemples complets","text":"<p>Consultez le r\u00e9pertoire <code>examples/</code> pour des projets complets utilisant diff\u00e9rents frameworks.</p>"}]}